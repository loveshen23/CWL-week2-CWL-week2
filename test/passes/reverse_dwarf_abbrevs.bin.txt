DWARF debug info
================

Contains section .debug_info (79 bytes)
Contains section .debug_abbrev (64 bytes)
Contains section .debug_line (53 bytes)
Contains section .debug_str (206 bytes)

.debug_abbrev contents:
Abbrev table for offset: 0x00000000
[1] DW_TAG_base_type	DW_CHILDREN_no
	DW_AT_name	DW_FORM_strp
	DW_AT_encoding	DW_FORM_data1
	DW_AT_byte_size	DW_FORM_data1

[2] DW_TAG_GNU_call_site	DW_CHILDREN_no
	DW_AT_low_pc	DW_FORM_addr

[3] DW_TAG_subprogram	DW_CHILDREN_yes
	DW_AT_low_pc	DW_FORM_addr
	DW_AT_high_pc	DW_FORM_data4
	DW_AT_frame_base	DW_FORM_exprloc
	DW_AT_GNU_all_call_sites	DW_FORM_flag_present
	DW_AT_name	DW_FORM_strp
	DW_AT_decl_file	DW_FORM_data1
	DW_AT_decl_line	DW_FORM_data1
	DW_AT_type	DW_FORM_ref4
	DW_AT_external	DW_FORM_flag_present

[4] DW_TAG_compile_unit	DW_CHILDREN_yes
	DW_AT_producer	DW_FORM_strp
	DW_AT_language	DW_FORM_data2
	DW_AT_name	DW_FORM_strp
	DW_AT_stmt_list	DW_FORM_sec_offset
	DW_AT_comp_dir	DW_FORM_strp
	DW_AT_low_pc	DW_FORM_addr
	DW_AT_high_pc	DW_FORM_data4


.debug_info contents:
0x00000000: Compile Unit: length = 0x0000004b version = 0x0004 abbr_offset = 0x0000 addr_size = 0x04 (next unit at 0x0000004f)

0x0000000b: DW_TAG_compile_unit [4] *
              DW_AT_producer [DW_FORM_strp]	( .debug_str[0x00000000] = "clang version 12.0.0 (/b/s/w/ir/cache/git/chromium.googlesource.com-external-github.com-llvm-llvm--project 576bd52f778405de08f309678e4fe4f7523bf7c4)")
              DW_AT_language [DW_FORM_data2]	(DW_LANG_C99)
              DW_AT_name [DW_FORM_strp]	( .debug_str[0x00000095] = "tests/hello_world.c")
              DW_AT_stmt_list [DW_FORM_sec_offset]	(0x00000000)
              DW_AT_comp_dir [DW_FORM_strp]	( .debug_str[0x000000a9] = "/home/azakai/Dev/emscripten")
              DW_AT_low_pc [DW_FORM_addr]	(0x0000000000000000)
              DW_AT_high_pc [DW_FORM_data4]	(0x00000000)

0x00000026:   DW_TAG_subprogram [3] *
                DW_AT_low_pc [DW_FORM_addr]	(0x0000000000000000)
                DW_AT_high_pc [DW_FORM_data4]	(0x00000000)
                DW_AT_frame_base [DW_FORM_exprloc]	(DW_OP_WASM_location 0x3 +0, <decoding error> 00 00 9f)
                DW_AT_GNU_all_call_sites [DW_FORM_flag_present]	(true)
                DW_AT_name [DW_FORM_strp]	( .debug_str[0x000000c5] = "main")
                DW_AT_decl_file [DW_FORM_data1]	("/home/azakai/Dev/emscripten/tests/hello_world.c")
                DW_AT_decl_line [DW_FORM_data1]	(10)
                DW_AT_type [DW_FORM_ref4]	(cu + 0x0047 => {0x00000047} "int")
                DW_AT_external [DW_FORM_flag_present]	(true)

0x00000041:     DW_TAG_GNU_call_site [2]  
                  DW_AT_low_pc [DW_FORM_addr]	(0x0000000000000000)

0x00000046:     NULL

0x00000047:   DW_TAG_base_type [1]  
                DW_AT_name [DW_FORM_strp]	( .debug_str[0x000000ca] = "int")
                DW_AT_encoding [DW_FORM_data1]	(DW_ATE_signed)
                DW_AT_byte_size [DW_FORM_data1]	(0x04)

0x0000004e:   NULL

.debug_line contents:
debug_line[0x00000000]
Line table prologue:
    total_length: 0x00000031
         version: 4
 prologue_length: 0x0000002b
 min_inst_length: 1
max_ops_per_inst: 1
 default_is_stmt: 1
       line_base: -5
      line_range: 14
     opcode_base: 13
standard_opcode_lengths[DW_LNS_copy] = 0
standard_opcode_lengths[DW_LNS_advance_pc] = 1
standard_opcode_lengths[DW_LNS_advance_line] = 1
standard_opcode_lengths[DW_LNS_set_file] = 1
standard_opcode_lengths[DW_LNS_set_column] = 1
standard_opcode_lengths[DW_LNS_negate_stmt] = 0
standard_opcode_lengths[DW_LNS_set_basic_block] = 0
standard_opcode_lengths[DW_LNS_const_add_pc] = 0
standard_opcode_lengths[DW_LNS_fixed_advance_pc] = 1
standard_opcode_lengths[DW_LNS_set_prologue_end] = 0
standard_opcode_lengths[DW_LNS_set_epilogue_begin] = 0
standard_opcode_lengths[DW_LNS_set_isa] = 1
include_directories[  1] = "tests"
file_names[  1]:
           name: "hello_world.c"
      dir_index: 1
       mod_time: 0x00000000
         length: 0x00000000

.debug_str contents:
0x00000000: "clang version 12.0.0 (/b/s/w/ir/cache/git/chromium.googlesource.com-external-github.com-llvm-llvm--project 576bd52f778405de08f309678e4fe4f7523bf7c4)"
0x00000095: "tests/hello_world.c"
0x000000a9: "/home/azakai/Dev/emscripten"
0x000000c5: "main"
0x000000ca: "int"
(module
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (type $i32_i32_i32_=>_i32 (func (param i32 i32 i32) (result i32)))
 (type $i32_=>_none (func (param i32)))
 (type $none_=>_i32 (func (result i32)))
 (type $i32_i32_=>_i32 (func (param i32 i32) (result i32)))
 (type $i32_i32_i32_i32_=>_i32 (func (param i32 i32 i32 i32) (result i32)))
 (type $i32_i64_i32_=>_i64 (func (param i32 i64 i32) (result i64)))
 (type $none_=>_none (func))
 (type $i32_i32_i64_i32_=>_i64 (func (param i32 i32 i64 i32) (result i64)))
 (type $i32_i32_i32_i32_i32_=>_i32 (func (param i32 i32 i32 i32 i32) (result i32)))
 (import "env" "memory" (memory $mimport$0 256 256))
 (import "env" "__indirect_function_table" (table $timport$0 4 funcref))
 (import "wasi_snapshot_preview1" "fd_write" (func $fimport$0 (param i32 i32 i32 i32) (result i32)))
 (import "env" "emscripten_memcpy_big" (func $fimport$1 (param i32 i32 i32) (result i32)))
 (import "env" "setTempRet0" (func $fimport$2 (param i32)))
 (global $global$0 (mut i32) (i32.const 5245136))
 (global $global$1 i32 (i32.const 2248))
 (data (i32.const 1024) "hello, world!\00\00\00\18\04")
 (data (i32.const 1048) "\05")
 (data (i32.const 1060) "\01")
 (data (i32.const 1084) "\02\00\00\00\03\00\00\00\c8\04\00\00\00\04")
 (data (i32.const 1108) "\01")
 (data (i32.const 1123) "\n\ff\ff\ff\ff")
 (elem (i32.const 1) $6 $5 $7)
 (export "__wasm_call_ctors" (func $0))
 (export "main" (func $2))
 (export "__errno_location" (func $3))
 (export "stackSave" (func $18))
 (export "stackRestore" (func $19))
 (export "stackAlloc" (func $20))
 (export "__data_end" (global $global$1))
 (export "dynCall_jiji" (func $22))
 (export "__growWasmMemory" (func $23))
 (func $0
  ;; code offset: 0x3
  (nop)
 )
 (func $1 (result i32)
  ;; code offset: 0xc
  (drop
   ;; code offset: 0xa
   (call $14
    ;; code offset: 0x7
    (i32.const 1024)
   )
  )
  ;; code offset: 0xd
  (i32.const 0)
 )
 (func $2 (param $0 i32) (param $1 i32) (result i32)
  ;; code offset: 0x12
  (call $1)
 )
 (func $3 (result i32)
  ;; code offset: 0x17
  (i32.const 1200)
 )
 (func $4 (param $0 i32) (result i32)
  ;; code offset: 0x20
  (if
   ;; code offset: 0x1f
   (i32.eqz
    ;; code offset: 0x1d
    (local.get $0)
   )
   ;; code offset: 0x24
   (return
    ;; code offset: 0x22
    (i32.const 0)
   )
  )
  ;; code offset: 0x2a
  (i32.store
   ;; code offset: 0x26
   (call $3)
   ;; code offset: 0x28
   (local.get $0)
  )
  ;; code offset: 0x2d
  (i32.const -1)
 )
 (func $5 (param $0 i32) (param $1 i32) (param $2 i32) (result i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  ;; code offset: 0x48
  (global.set $global$0
   ;; code offset: 0x46
   (local.tee $3
    ;; code offset: 0x45
    (i32.sub
     ;; code offset: 0x41
     (global.get $global$0)
     ;; code offset: 0x43
     (i32.const 32)
    )
   )
  )
  ;; code offset: 0x53
  (i32.store offset=16
   ;; code offset: 0x4a
   (local.get $3)
   ;; code offset: 0x51
   (local.tee $4
    ;; code offset: 0x4e
    (i32.load offset=28
     ;; code offset: 0x4c
     (local.get $0)
    )
   )
  )
  ;; code offset: 0x5b
  (local.set $5
   ;; code offset: 0x58
   (i32.load offset=20
    ;; code offset: 0x56
    (local.get $0)
   )
  )
  ;; code offset: 0x61
  (i32.store offset=28
   ;; code offset: 0x5d
   (local.get $3)
   ;; code offset: 0x5f
   (local.get $2)
  )
  ;; code offset: 0x68
  (i32.store offset=24
   ;; code offset: 0x64
   (local.get $3)
   ;; code offset: 0x66
   (local.get $1)
  )
  ;; code offset: 0x74
  (i32.store offset=20
   ;; code offset: 0x6b
   (local.get $3)
   ;; code offset: 0x72
   (local.tee $1
    ;; code offset: 0x71
    (i32.sub
     ;; code offset: 0x6d
     (local.get $5)
     ;; code offset: 0x6f
     (local.get $4)
    )
   )
  )
  ;; code offset: 0x7c
  (local.set $6
   ;; code offset: 0x7b
   (i32.add
    ;; code offset: 0x77
    (local.get $1)
    ;; code offset: 0x79
    (local.get $2)
   )
  )
  ;; code offset: 0x80
  (local.set $7
   ;; code offset: 0x7e
   (i32.const 2)
  )
  ;; code offset: 0x87
  (local.set $1
   ;; code offset: 0x86
   (i32.add
    ;; code offset: 0x82
    (local.get $3)
    ;; code offset: 0x84
    (i32.const 16)
   )
  )
  ;; code offset: 0x18d
  (local.set $4
   ;; code offset: 0x89
   (block $label$1 (result i32)
    (block $label$2
     (block $label$3
      ;; code offset: 0xa5
      (if
       ;; code offset: 0xa4
       (i32.eqz
        ;; code offset: 0xa2
        (call $4
         ;; code offset: 0xa0
         (call $fimport$0
          ;; code offset: 0x91
          (i32.load offset=60
           ;; code offset: 0x8f
           (local.get $0)
          )
          ;; code offset: 0x98
          (i32.add
           ;; code offset: 0x94
           (local.get $3)
           ;; code offset: 0x96
           (i32.const 16)
          )
          ;; code offset: 0x99
          (i32.const 2)
          ;; code offset: 0x9f
          (i32.add
           ;; code offset: 0x9b
           (local.get $3)
           ;; code offset: 0x9d
           (i32.const 12)
          )
         )
        )
       )
       ;; code offset: 0xa7
       (loop $label$5
        ;; code offset: 0xb3
        (br_if $label$3
         ;; code offset: 0xb2
         (i32.eq
          ;; code offset: 0xa9
          (local.get $6)
          ;; code offset: 0xb0
          (local.tee $4
           ;; code offset: 0xad
           (i32.load offset=12
            ;; code offset: 0xab
            (local.get $3)
           )
          )
         )
        )
        ;; code offset: 0xba
        (br_if $label$2
         ;; code offset: 0xb9
         (i32.le_s
          ;; code offset: 0xb5
          (local.get $4)
          ;; code offset: 0xb7
          (i32.const -1)
         )
        )
        ;; code offset: 0xe2
        (i32.store
         ;; code offset: 0xce
         (local.tee $9
          ;; code offset: 0xcd
          (i32.add
           ;; code offset: 0xbc
           (local.get $1)
           ;; code offset: 0xcc
           (i32.shl
            ;; code offset: 0xc8
            (local.tee $5
             ;; code offset: 0xc7
             (i32.gt_u
              ;; code offset: 0xbe
              (local.get $4)
              ;; code offset: 0xc5
              (local.tee $8
               ;; code offset: 0xc2
               (i32.load offset=4
                ;; code offset: 0xc0
                (local.get $1)
               )
              )
             )
            )
            ;; code offset: 0xca
            (i32.const 3)
           )
          )
         )
         ;; code offset: 0xe1
         (i32.add
          ;; code offset: 0xda
          (local.tee $8
           ;; code offset: 0xd9
           (i32.sub
            ;; code offset: 0xd0
            (local.get $4)
            ;; code offset: 0xd8
            (select
             ;; code offset: 0xd2
             (local.get $8)
             ;; code offset: 0xd4
             (i32.const 0)
             ;; code offset: 0xd6
             (local.get $5)
            )
           )
          )
          ;; code offset: 0xde
          (i32.load
           ;; code offset: 0xdc
           (local.get $9)
          )
         )
        )
        ;; code offset: 0xf9
        (i32.store
         ;; code offset: 0xef
         (local.tee $9
          ;; code offset: 0xee
          (i32.add
           ;; code offset: 0xe5
           (local.get $1)
           ;; code offset: 0xed
           (select
            ;; code offset: 0xe7
            (i32.const 12)
            ;; code offset: 0xe9
            (i32.const 4)
            ;; code offset: 0xeb
            (local.get $5)
           )
          )
         )
         ;; code offset: 0xf8
         (i32.sub
          ;; code offset: 0xf3
          (i32.load
           ;; code offset: 0xf1
           (local.get $9)
          )
          ;; code offset: 0xf6
          (local.get $8)
         )
        )
        ;; code offset: 0x101
        (local.set $6
         ;; code offset: 0x100
         (i32.sub
          ;; code offset: 0xfc
          (local.get $6)
          ;; code offset: 0xfe
          (local.get $4)
         )
        )
        ;; code offset: 0x125
        (br_if $label$5
         ;; code offset: 0x124
         (i32.eqz
          ;; code offset: 0x122
          (call $4
           ;; code offset: 0x120
           (call $fimport$0
            ;; code offset: 0x105
            (i32.load offset=60
             ;; code offset: 0x103
             (local.get $0)
            )
            ;; code offset: 0x112
            (local.tee $1
             ;; code offset: 0x111
             (select
              ;; code offset: 0x10c
              (i32.add
               ;; code offset: 0x108
               (local.get $1)
               ;; code offset: 0x10a
               (i32.const 8)
              )
              ;; code offset: 0x10d
              (local.get $1)
              ;; code offset: 0x10f
              (local.get $5)
             )
            )
            ;; code offset: 0x119
            (local.tee $7
             ;; code offset: 0x118
             (i32.sub
              ;; code offset: 0x114
              (local.get $7)
              ;; code offset: 0x116
              (local.get $5)
             )
            )
            ;; code offset: 0x11f
            (i32.add
             ;; code offset: 0x11b
             (local.get $3)
             ;; code offset: 0x11d
             (i32.const 12)
            )
           )
          )
         )
        )
       )
      )
      ;; code offset: 0x12d
      (i32.store offset=12
       ;; code offset: 0x129
       (local.get $3)
       ;; code offset: 0x12b
       (i32.const -1)
      )
      ;; code offset: 0x135
      (br_if $label$2
       ;; code offset: 0x134
       (i32.ne
        ;; code offset: 0x130
        (local.get $6)
        ;; code offset: 0x132
        (i32.const -1)
       )
      )
     )
     ;; code offset: 0x141
     (i32.store offset=28
      ;; code offset: 0x138
      (local.get $0)
      ;; code offset: 0x13f
      (local.tee $1
       ;; code offset: 0x13c
       (i32.load offset=44
        ;; code offset: 0x13a
        (local.get $0)
       )
      )
     )
     ;; code offset: 0x148
     (i32.store offset=20
      ;; code offset: 0x144
      (local.get $0)
      ;; code offset: 0x146
      (local.get $1)
     )
     ;; code offset: 0x155
     (i32.store offset=16
      ;; code offset: 0x14b
      (local.get $0)
      ;; code offset: 0x154
      (i32.add
       ;; code offset: 0x14d
       (local.get $1)
       ;; code offset: 0x151
       (i32.load offset=48
        ;; code offset: 0x14f
        (local.get $0)
       )
      )
     )
     ;; code offset: 0x15a
     (br $label$1
      ;; code offset: 0x158
      (local.get $2)
     )
    )
    ;; code offset: 0x161
    (i32.store offset=28
     ;; code offset: 0x15d
     (local.get $0)
     ;; code offset: 0x15f
     (i32.const 0)
    )
    ;; code offset: 0x168
    (i64.store offset=16
     ;; code offset: 0x164
     (local.get $0)
     ;; code offset: 0x166
     (i64.const 0)
    )
    ;; code offset: 0x175
    (i32.store
     ;; code offset: 0x16b
     (local.get $0)
     ;; code offset: 0x174
     (i32.or
      ;; code offset: 0x16f
      (i32.load
       ;; code offset: 0x16d
       (local.get $0)
      )
      ;; code offset: 0x172
      (i32.const 32)
     )
    )
    ;; code offset: 0x183
    (drop
     ;; code offset: 0x181
     (br_if $label$1
      ;; code offset: 0x17a
      (local.tee $4
       ;; code offset: 0x178
       (i32.const 0)
      )
      ;; code offset: 0x180
      (i32.eq
       ;; code offset: 0x17c
       (local.get $7)
       ;; code offset: 0x17e
       (i32.const 2)
      )
     )
    )
    ;; code offset: 0x18b
    (i32.sub
     ;; code offset: 0x184
     (local.get $2)
     ;; code offset: 0x188
     (i32.load offset=4
      ;; code offset: 0x186
      (local.get $1)
     )
    )
   )
  )
  ;; code offset: 0x194
  (global.set $global$0
   ;; code offset: 0x193
   (i32.add
    ;; code offset: 0x18f
    (local.get $3)
    ;; code offset: 0x191
    (i32.const 32)
   )
  )
  ;; code offset: 0x196
  (local.get $4)
 )
 (func $6 (param $0 i32) (result i32)
  ;; code offset: 0x19b
  (i32.const 0)
 )
 (func $7 (param $0 i32) (param $1 i64) (param $2 i32) (result i64)
  ;; code offset: 0x1a0
  (i64.const 0)
 )
 (func $8 (param $0 i32) (result i32)
  (local $1 i32)
  ;; code offset: 0x1b6
  (i32.store8 offset=74
   ;; code offset: 0x1a7
   (local.get $0)
   ;; code offset: 0x1b5
   (i32.or
    ;; code offset: 0x1b2
    (i32.add
     ;; code offset: 0x1ae
     (local.tee $1
      ;; code offset: 0x1ab
      (i32.load8_u offset=74
       ;; code offset: 0x1a9
       (local.get $0)
      )
     )
     ;; code offset: 0x1b0
     (i32.const -1)
    )
    ;; code offset: 0x1b3
    (local.get $1)
   )
  )
  ;; code offset: 0x1c3
  (if
   ;; code offset: 0x1c2
   (i32.and
    ;; code offset: 0x1be
    (local.tee $1
     ;; code offset: 0x1bb
     (i32.load
      ;; code offset: 0x1b9
      (local.get $0)
     )
    )
    ;; code offset: 0x1c0
    (i32.const 8)
   )
   (block
    ;; code offset: 0x1cc
    (i32.store
     ;; code offset: 0x1c5
     (local.get $0)
     ;; code offset: 0x1cb
     (i32.or
      ;; code offset: 0x1c7
      (local.get $1)
      ;; code offset: 0x1c9
      (i32.const 32)
     )
    )
    ;; code offset: 0x1d1
    (return
     ;; code offset: 0x1cf
     (i32.const -1)
    )
   )
  )
  ;; code offset: 0x1d7
  (i64.store offset=4 align=4
   ;; code offset: 0x1d3
   (local.get $0)
   ;; code offset: 0x1d5
   (i64.const 0)
  )
  ;; code offset: 0x1e3
  (i32.store offset=28
   ;; code offset: 0x1da
   (local.get $0)
   ;; code offset: 0x1e1
   (local.tee $1
    ;; code offset: 0x1de
    (i32.load offset=44
     ;; code offset: 0x1dc
     (local.get $0)
    )
   )
  )
  ;; code offset: 0x1ea
  (i32.store offset=20
   ;; code offset: 0x1e6
   (local.get $0)
   ;; code offset: 0x1e8
   (local.get $1)
  )
  ;; code offset: 0x1f7
  (i32.store offset=16
   ;; code offset: 0x1ed
   (local.get $0)
   ;; code offset: 0x1f6
   (i32.add
    ;; code offset: 0x1ef
    (local.get $1)
    ;; code offset: 0x1f3
    (i32.load offset=48
     ;; code offset: 0x1f1
     (local.get $0)
    )
   )
  )
  ;; code offset: 0x1fa
  (i32.const 0)
 )
 (func $9 (param $0 i32) (param $1 i32) (param $2 i32) (result i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  ;; code offset: 0x20c
  (if
   ;; code offset: 0x20b
   (i32.ge_u
    ;; code offset: 0x206
    (local.get $2)
    ;; code offset: 0x208
    (i32.const 512)
   )
   (block
    ;; code offset: 0x216
    (drop
     ;; code offset: 0x214
     (call $fimport$1
      ;; code offset: 0x20e
      (local.get $0)
      ;; code offset: 0x210
      (local.get $1)
      ;; code offset: 0x212
      (local.get $2)
     )
    )
    ;; code offset: 0x219
    (return
     ;; code offset: 0x217
     (local.get $0)
    )
   )
  )
  ;; code offset: 0x220
  (local.set $3
   ;; code offset: 0x21f
   (i32.add
    ;; code offset: 0x21b
    (local.get $0)
    ;; code offset: 0x21d
    (local.get $2)
   )
  )
  ;; code offset: 0x222
  (block $label$2
   ;; code offset: 0x22d
   (if
    ;; code offset: 0x22c
    (i32.eqz
     ;; code offset: 0x22b
     (i32.and
      ;; code offset: 0x228
      (i32.xor
       