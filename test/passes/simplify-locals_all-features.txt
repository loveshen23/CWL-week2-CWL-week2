(module
 (type $5 (func (param i32) (result i32)))
 (type $FUNCSIG$v (func))
 (type $FUNCSIG$i (func (result i32)))
 (type $FUNCSIG$iiiii (func (param i32 i32 i32 i32) (result i32)))
 (type $6 (func (param i32 i32 i32 i32 i32 i32)))
 (type $i32_i32_i32_=>_i32 (func (param i32 i32 i32) (result i32)))
 (type $FUNCSIG$iiiiii (func (param i32 i32 i32 i32 i32) (result i32)))
 (type $i32_i32_=>_i32 (func (param i32 i32) (result i32)))
 (type $f32_=>_none (func (param f32)))
 (type $4 (func (param i32)))
 (type $i32_i32_=>_none (func (param i32 i32)))
 (type $i64_=>_none (func (param i64)))
 (type $i32_f64_f64_f32_i32_=>_f64 (func (param i32 f64 f64 f32 i32) (result f64)))
 (import "env" "waka" (func $waka))
 (import "env" "waka_int" (func $waka_int (result i32)))
 (import "env" "i64sub" (func $_i64Subtract (param i32 i32 i32 i32) (result i32)))
 (import "env" "moddi" (func $___udivmoddi4 (param i32 i32 i32 i32 i32) (result i32)))
 (import "env" "lp" (func $lp (param i32 i32) (result i32)))
 (import "fuzzing-support" "log-f32" (func $fimport$0 (param f32)))
 (global $global$0 (mut i32) (i32.const 10))
 (memory $0 256 256)
 (func $contrast (type $FUNCSIG$v)
  (local $x i32)
  (local $y i32)
  (local $z i32)
  (local $a i32)
  (local $b i32)
  (nop)
  (if
   (local.tee $x
    (i32.const 1)
   )
   (nop)
  )
  (if
   (local.get $x)
   (nop)
  )
  (nop)
  (drop
   (if (result i32)
    (i32.const 2)
    (i32.const 3)
    (i32.const 4)
   )
  )
  (nop)
  (drop
   (block (result i32)
    (i32.const 5)
   )
  )
  (nop)
  (drop
   (if (result i32)
    (i32.const 6)
    (block (result i32)
     (nop)
     (i32.const 7)
    )
    (block (result i32)
     (nop)
     (i32.const 8)
    )
   )
  )
  (nop)
  (drop
   (block $val (result i32)
    (if
     (i32.const 10)
     (block
      (nop)
      (br $val
       (i32.const 11)
      )
     )
    )
    (nop)
    (i32.const 12)
   )
  )
 )
 (func $b0-yes (type $4) (param $i1 i32)
  (local $x i32)
  (local $y i32)
  (local $a i32)
  (local $b i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  (nop)
  (drop
   (i32.const 5)
  )
  (block $block0
   (nop)
   (drop
    (i32.const 7)
   )
  )
  (nop)
  (drop
   (i32.const 11)
  )
  (drop
   (i32.const 9)
  )
  (drop
   (local.get $y)
  )
  (block $block1
   (drop
    (i32.const 8)
   )
   (drop
    (local.get $y)
   )
  )
  (drop
   (i32.const 11)
  )
  (drop
   (local.get $y)
  )
  (nop)
  (nop)
  (nop)
  (nop)
  (nop)
  (nop)
  (nop)
  (block $block2
   (nop)
   (nop)
   (drop
    (i32.const 1)
   )
   (drop
    (i32.const 2)
   )
   (drop
    (i32.const 3)
   )
   (drop
    (i32.const 4)
   )
   (nop)
   (nop)
   (drop
    (i32.const 6)
   )
   (drop
    (i32.const 5)
   )
   (drop
    (i32.const 7)
   )
   (drop
    (i32.const 8)
   )
   (local.set $a
    (i32.const 9)
   )
   (local.set $b
    (i32.const 10)
   )
   (call $waka)
   (drop
    (local.get $a)
   )
   (drop
    (local.get $b)
   )
   (drop
    (i32.const 11)
   )
   (drop
    (i32.const 12)
   )
   (nop)
   (nop)
   (drop
    (i32.load
     (i32.const 24)
    )
   )
   (drop
    (i32.const 13)
   )
   (drop
    (i32.const 14)
   )
   (drop
    (i32.const 15)
   )
   (drop
    (i32.const 16)
   )
   (nop)
   (nop)
   (i32.store
    (i32.const 48)
    (i32.const 96)
   )
   (local.set $a
    (i32.const 17)
   )
   (local.set $b
    (i32.const 18)
   )
  )
  (block $block3
   (nop)
   (local.set $a
    (call $waka_int)
   )
   (call $waka)
   (local.set $a
    (call $waka_int)
   )
   (call $waka)
   (drop
    (local.get $a)
   )
   (call $waka)
   (local.set $a
    (call $waka_int)
   )
   (drop
    (i32.load
     (i32.const 1)
    )
   )
   (drop
    (local.get $a)
   )
   (call $waka)
   (local.set $a
    (call $waka_int)
   )
   (i32.store
    (i32.const 1)
    (i32.const 2)
   )
   (drop
    (local.get $a)
   )
   (call $waka)
   (nop)
   (local.set $a
    (i32.load
     (i32.const 100)
    )
   )
   (call $waka)
   (nop)
   (drop
    (i32.load
     (i32.const 1)
    )
   )
   (local.set $a
    (i32.load
     (i32.const 101)
    )
   )
   (call $waka)
   (local.set $a
    (i32.load
     (i32.const 102)
    )
   )
   (call $waka)
   (drop
    (local.get $a)
   )
   (call $waka)
   (local.set $a
    (i32.load
     (i32.const 103)
    )
   )
   (i32.store
    (i32.const 1)
    (i32.const 2)
   )
   (drop
    (local.get $a)
   )
   (call $waka)
   (nop)
   (local.set $a
    (block (result i32)
     (block
      (nop)
      (i32.store
       (i32.const 104)
       (local.tee $5
        (i32.const 105)
       )
      )
     )
     (local.get $5)
    )
   )
   (call $waka)
   (local.set $a
    (block (result i32)
     (block
      (nop)
      (i32.store
       (i32.const 106)
       (local.tee $6
        (i32.const 107)
       )
      )
     )
     (local.get $6)
    )
   )
   (call $waka)
   (drop
    (local.get $a)
   )
   (call $waka)
   (local.set $a
    (block (result i32)
     (block
      (nop)
      (i32.store
       (i32.const 108)
       (local.tee $7
        (i32.const 109)
       )
      )
     )
     (local.get $7)
    )
   )
   (drop
    (i32.load
     (i32.const 1)
    )
   )
   (drop
    (local.get $a)
   )
   (call $waka)
   (local.set $a
    (block (result i32)
     (block
      (nop)
      (i32.store
       (i32.const 110)
       (local.tee $8
        (i32.const 111)
       )
      )
     )
     (local.get $8)
    )
   )
   (i32.store
    (i32.const 1)
    (i32.const 2)
   )
   (drop
    (local.get $a)
   )
   (call $waka)
  )
  (block $out-of-block
   (nop)
   (nop)
   (drop
    (block $b (result i32)
     (block $c
      (br $b
       (i32.const 1337)
      )
     )
     (nop)
     (i32.const 9876)
    )
   )
  )
  (block $loopey
   (local.set $a
    (i32.const 1337)
   )
   (drop
    (loop $loop-in5 (result i32)
     (drop
      (local.get $a)
     )
     (local.tee $a
      (i32.const 9876)
     )
    )
   )
   (drop
    (local.get $a)
   )
  )
 )
 (func $Ia (type $5) (param $a i32) (result i32)
  (local $b i32)
  (block $switch$0
   (block $switch-default$6
    (nop)
   )
  )
  (return
   (i32.const 60)
  )
 )
 (func $memories (type $6) (param $i2 i32) (param $i3 i32) (param $bi2 i32) (param $bi3 i32) (param $ci3 i32) (param $di3 i32)
  (local $set_with_no_get i32)
  (nop)
  (i32.store8
   (local.get $i2)
   (i32.const 1)
  )
  (nop)
  (i32.store8
   (local.tee $bi3
    (i32.const 1)
   )
   (local.get $bi3)
  )
  (nop)
  (i32.store8
   (local.get $bi3)
   (local.get $bi3)
  )
  (local.set $di3
   (local.tee $bi3
    (i32.const 123)
   )
  )
  (i32.store8
   (local.get $bi3)
   (local.get $di3)
  )
  (nop)
 )
 (func $___remdi3 (type $FUNCSIG$iiiii) (param $$a$0 i32) (param $$a$1 i32) (param $$b$0 i32) (param $$b$1 i32) (result i32)
  (local $$1$1 i32)
  (local $$1$0 i32)
  (local $$rem i32)
  (local $__stackBase__ i32)
  (local $$2$1 i32)
  (local $$2$0 i32)
  (local $$4$1 i32)
  (local $$4$0 i32)
  (local $$10$1 i32)
  (local $$10$0 i32)
  (local $$6$0 i32)
  (local.set $__stackBase__
   (i32.load
    (i32.const 8)
   )
  )
  (i32.store
   (i32.const 8)
   (i32.add
    (i32.load
     (i32.const 8)
    )
    (i32.const 16)
   )
  )
  (local.set $$rem
   (local.get $__stackBase__)
  )
  (local.set $$1$0
   (i32.or
    (i32.shr_s
     (local.get $$a$1)
     (i32.const 31)
    )
    (i32.shl
     (if (result i32)
      (i32.lt_s
       (local.get