;; RUN: wasm2js --help | filecheck %s
;; CHECK: ================================================================================
;; CHECK-NEXT: wasm2js INFILE
;; CHECK-NEXT:
;; CHECK-NEXT: Transform .wasm/.wat files to asm.js
;; CHECK-NEXT: ================================================================================
;; CHECK-NEXT:
;; CHECK-NEXT:
;; CHECK-NEXT: wasm2js options:
;; CHECK-NEXT: ----------------
;; CHECK-NEXT:
;; CHECK-NEXT:   --output,-o                                   Output file (stdout if not
;; CHECK-NEXT:                                                 specified)
;; CHECK-NEXT:
;; CHECK-NEXT:   --allow-asserts                               Allow compilation of .wast
;; CHECK-NEXT:                                                 testing asserts
;; CHECK-NEXT:
;; CHECK-NEXT:   --pedantic                                    Emulate WebAssembly trapping
;; CHECK-NEXT:                                                 behavior
;; CHECK-NEXT:
;; CHECK-NEXT:   --emscripten                                  Emulate the glue in
;; CHECK-NEXT:                                                 emscripten-compatible form (and
;; CHECK-NEXT:                                                 not ES6 module form)
;; CHECK-NEXT:
;; CHECK-NEXT:   --deterministic                               Replace WebAssembly trapping
;; CHECK-NEXT:                                                 behavior deterministically (the
;; CHECK-NEXT:                                                 default is to not care about
;; CHECK-NEXT:                                                 what would trap in wasm, like a
;; CHECK-NEXT:                                                 load out of bounds or integer
;; CHECK-NEXT:                                                 divide by zero; with this flag,
;; CHECK-NEXT:                                                 we try to be deterministic at
;; CHECK-NEXT:                                                 least in what happens, which
;; CHECK-NEXT:                                                 might or might not be to trap
;; CHECK-NEXT:                                                 like wasm, but at least should
;; CHECK-NEXT:                                                 not vary)
;; CHECK-NEXT:
;; CHECK-NEXT:   --symbols-file                                Emit a symbols file that maps
;; CHECK-NEXT:                                                 function indexes to their
;; CHECK-NEXT:                                                 original names
;; CHECK-NEXT:
;; CHECK-NEXT:
;; CHECK-NEXT: Optimization passes:
;; CHECK-NEXT: --------------------
;; CHECK-NEXT:
;; CHECK-NEXT:   --abstract-type-refining                      refine and merge abstract
;; CHECK-NEXT:                                                 (never-created) types
;; CHECK-NEXT:
;; CHECK-NEXT:   --alignment-lowering                          lower unaligned loads and stores
;; CHECK-NEXT:                                                 to smaller aligned ones
;; CHECK-NEXT:
;; CHECK-NEXT:   --asyncify                                    async/await style transform,
;; CHECK-NEXT:                                                 allowing pausing and resuming
;; CHECK-NEXT:
;; CHECK-NEXT:   --avoid-reinterprets                          Tries to avoid reinterpret
;; CHECK-NEXT:                                                 operations via more loads
;; CHECK-NEXT:
;; CHECK-NEXT:   --cfp                                         propagate constant struct field
;; CHECK-NEXT:                                                 values
;; CHECK-NEXT:
;; CHECK-NEXT:   --coalesce-locals                             reduce # of locals by coalescing
;; CHECK-NEXT:
;; CHECK-NEXT:   --coalesce-locals-learning                    reduce # of locals by coalescing
;; CHECK-NEXT:                                                 and learning
;; CHECK-NEXT:
;; CHECK-NEXT:   --code-folding                                fold code, merging duplicates
;; CHECK-NEXT:
;; CHECK-NEXT:   --code-pushing                                push code forward, potentially
;; CHECK-NEXT:                                                 making it not always execute
;; CHECK-NEXT:
;; CHECK-NEXT:   --const-hoisting                              hoist repeated constants to a
;; CHECK-NEXT:                                                 local
;; CHECK-NEXT:
;; CHECK-NEXT:   --dae                                         removes arguments to calls in an
;; CHECK-NEXT:                                                 lto-like manner
;; CHECK-NEXT:
;; CHECK-NEXT:   --dae-optimizing                              removes arguments to calls in an
;; CHECK-NEXT:                                                 lto-like manner, and optimizes
;; CHECK-NEXT:                                                 where we removed
;; CHECK-NEXT:
;; CHECK-NEXT:   --dce                                         removes unreachable code
;; CHECK-NEXT:
;; CHECK-NEXT:   --dealign                                     forces all loads and stores to
;; CHECK-NEXT:                                                 have alignment 1
;; CHECK-NEXT:
;; CHECK-NEXT:   --denan                                       instrument the wasm to convert
;; CHECK-NEXT:                                                 NaNs into 0 at runtime
;; CHECK-NEXT:
;; CHECK-NEXT:   --dfo                                         optimizes using the DataFlow SSA
;; CHECK-NEXT:                                                 IR
;; CHECK-NEXT:
;; CHECK-NEXT:   --directize                                   turns indirect calls into direct
;; CHECK-NEXT:                                                 ones
;; CHECK-NEXT:
;; CHECK-NEXT:   --discard-global-effects                      discards global effect info
;; CHECK-NEXT:
;; CHECK-NEXT:   --duplicate-function-elimination              removes duplicate functions
;; CHECK-NEXT:
;; CHECK-NEXT:   --duplicate-import-elimination                removes duplicate imports
;; CHECK-NEXT:
;; CHECK-NEXT:   --dwarfdump                                   dump DWARF debug info sections
;; CHECK-NEXT:                                                 from the read binary
;; CHECK-NEXT:
;; CHECK-NEXT:   --emit-target-features                        emit the target features section
;; CHECK-NEXT:                                                 in the output
;; CHECK-NEXT:
;; CHECK-NEXT:   --extract-function                            leaves just one function (useful
;; CHECK-NEXT:                                                 for debugging)
;; CHECK-NEXT:
;; CHECK-NEXT:   --extract-function-index                      leaves just one function
;; CHECK-NEXT:                                                 selected by index
;; CHECK-NEXT:
;; CHECK-NEXT:   --flatten                                     flattens out code, removing
;; CHECK-NEXT:                                                 nesting
;; CHECK-NEXT:
;; CHECK-NEXT:   --fpcast-emu                                  emulates function pointer casts,
;; CHECK-NEXT:                                                 allowing incorrect indirect
;; CHECK-NEXT:                                                 calls to (sometimes) work
;; CHECK-NEXT:
;; CHECK-NEXT:   --func-metrics                                reports function metrics
;; CHECK-NEXT:
;; CHECK-NEXT:   --generate-dyncalls                           generate dynCall fuctions used
;; CHECK-NEXT:                                                 by emscripten ABI
;; CHECK-NEXT:
;; CHECK-NEXT:   --generate-global-effects                     generate global effect info
;; CHECK-NEXT:                                                 (helps later passes)
;; CHECK-NEXT:
;; CHECK-NEXT:   --generate-i64-dyncalls                       generate dynCall functions used
;; CHECK-NEXT:                                                 by emscripten ABI, but only for
;; CHECK-NEXT:                                                 functions with i64 in their
;; CHECK-NEXT:                                                 signature (which cannot be
;; CHECK-NEXT:                                                 invoked via the wasm table
;; CHECK-NEXT:                                                 without JavaScript BigInt
;; CHECK-NEXT:                                                 support).
;; CHECK-NEXT:
;; CHECK-NEXT:   --generate-stack-ir                           generate Stack IR
;; CHECK-NEXT:
;; CHECK-NEXT:   --global-refining                             refine the types of globals
;; CHECK-NEXT:
;; CHECK-NEXT:   --gsi                                         globally optimize struct values
;; CHECK-NEXT:
;; CHECK-NEXT:   --gto                                         globally optimize GC types
;; CHECK-NEXT:
;; CHECK-NEXT:   --gufa                                        Grand Unified Flow Analysis:
;; CHECK-NEXT:                                                 optimize the entire program
;; CHECK-NEXT:                                                 using information about what
;; CHECK-NEXT:                                                 content can actually appear in
;; CHECK-NEXT:                                                 each location
;; CHECK-NEXT:
;; CHECK-NEXT:   --gufa-optimizing                             GUFA plus local optimizations in
;; CHECK-NEXT:                                                 functions we modified
;; CHECK-NEXT:
;; CHECK-NEXT:   --heap2local                                  replace GC allocations with
;; CHECK-NEXT:                                                 locals
;; CHECK-NEXT:
;; CHECK-NEXT:   --i64-to-i32-lowering                         lower all uses of i64s to use
;; CHECK-NEXT:                                                 i32s instead
;; CHECK-NEXT:
;; CHECK-NEXT:   --inline-main                                 inline __original_main into main
;; CHECK-NEXT:
;; CHECK-NEXT:   --inlining                                    inline functions (you probably
;; CHECK-NEXT:                                                 want inlining-optimizing)
;; CHECK-NEXT:
;; CHECK-NEXT:   --inlining-optimizing                         inline functions and optimizes
;; CHECK-NEXT:                                                 where we inlined
;; CHECK-NEXT:
;; CHECK-NEXT:   --instrument-locals                           instrument the build with code
;; CHECK-NEXT:                                                 to intercept all loads and
;; CHECK-NEXT:                                                 stores
;; CHECK-NEXT:
;; CHECK-NEXT:   --instrument-memory                           instrument the build with code
;; CHECK-NEXT:                                                 to intercept all loads and
;; CHECK-NEXT:                                                 stores
;; CHECK-NEXT:
;; CHECK-NEXT:   --intrinsic-lowering                          lower away binaryen intrinsics
;; CHECK-NEXT:
;; CHECK-NEXT:   --jspi                                        wrap imports and exports for
;; CHECK-NEXT:                                                 JavaScript promise integration
;; CHECK-NEXT:
;; CHECK-NEXT:   --legalize-js-interface                       legalizes i64 types on the
;; CHECK-NEXT:                                                 import/export boundary
;; CHECK-NEXT:
;; CHECK-NEXT:   --legalize-js-interface-minimally             legalizes i64 types on the
;; CHECK-NEXT:                                                 import/export boundary in a
;; CHECK-NEXT:                                                 minimal manner, only on things
;; CHECK-NEXT:                                                 only JS will call
;; CHECK-NEXT:
;; CHECK-NEXT:   --licm                                        loop invariant code motion
;; CHECK-NEXT:
;; CHECK-NEXT:   --limit-segments                              attempt to merge segments to fit
;; CHECK-NEXT:                                                 within web limits
;; CHECK-NEXT:
;; CHECK-NEXT:   --local-cse                                   common subexpression elimination
;; CHECK-NEXT:                                                 inside basic blocks
;; CHECK-NEXT:
;; CHECK-NEXT:   --local-subtyping                             apply more specific subtypes to
;; CHECK-NEXT:                                                 locals where possible
;; CHECK-NEXT:
;; CHECK-NEXT:   --log-execution                               instrument the build with
;; CHECK-NEXT:                                                 logging of where execution goes
;; CHECK-NEXT:
;; CHECK-NEXT:   --memory-packing                              packs memory into separate
;; CHECK-NEXT:                                                 segments, skipping zeros
;; CHECK-NEXT:
;; CHECK-NEXT:   --memory64-lowering                           lower loads and stores to a
;; CHECK-NEXT:                                                 64-bit memory to instead use a
;; CHECK-NEXT:                                                 32-bit one
;; CHECK-NEXT:
;; CHECK-NEXT:   --merge-blocks                                merges blocks to their parents
;; CHECK-NEXT:
;; CHECK-NEXT:   --merge-locals                                merges locals when beneficial
;; CHECK-NEXT:
;; CHECK-NEXT:   --merge-similar-functions                     merges similar functions when
;; CHECK-NEXT:                                                 benefical
;; CHECK-NEXT:
;; CHECK-NEXT:   --metrics                                     reports metrics
;; CHECK-NEXT:
;; CHECK-NEXT:   --minify-imports                              minifies import names (only
;; CHECK-NEXT:                                                 those, and not export names),
;; CHECK-NEXT:                                                 and emits a mapping to the
;; CHECK-NEXT:                                                 minified ones
;; CHECK-NEXT:
;; CHECK-NEXT:   --minify-imports-and-exports                  minifies both import and export
;; CHECK-NEXT:                                                 names, and emits a mapping to
;; CHECK-NEXT:                                                 the minified ones
;; CHECK-NEXT:
;; CHECK-NEXT:   --minify-imports-and-exports-and-modules      minifies both import and export
;; CHECK-NEXT:                                                 names, and emits a mapping to
;; CHECK-NEXT:                                                 the minified ones, and minifies
;; CHECK-NEXT:                                                 the modules as well
;; CHECK-NEXT:
;; CHECK-NEXT:   --mod-asyncify-always-and-only-unwind         apply the assumption that
;; CHECK-NEXT:                                                 asyncify imports always unwind,
;; CHECK-NEXT:                                                 and we never rewind
;; CHECK-NEXT:
;; CHECK-NEXT:   --mod-asyncify-never-unwind                   apply the assumption that
;; CHECK-NEXT:                                                 asyncify never unwinds
;; CHECK-NEXT:
;; CHECK-NEXT:   --monomorphize                                creates specialized versions of
;; CHECK-NEXT:                                                 functions
;; CHECK-NEXT:
;; CHECK-NEXT:   --monomorphize-always                         creates specialized versions of
;; CHECK-NEXT:                                                 functions (even if unhelpful)
;; CHECK-NEXT:
;; CHECK-NEXT:   --multi-memory-lowering                       combines multiple memories into
;; CHECK-NEXT:                                                 a single memory
;; CHECK-NEXT:
;; CHECK-NEXT:   --multi-memory-lowering-with-bounds-checks    combines multiple memories into
;; CHECK-NEXT:                                                 a single memory, trapping if the
;; CHECK-NEXT:                                                 read or write is larger than the
;; CHECK-NEXT:                                                 length of the memory's data
;; CHECK-NEXT:
;; CHECK-NEXT:   --name-types                                  (re)name all heap types
;; CHECK-NEXT:
;; CHECK-NEXT:   --nm                                          name list
;; CHECK-NEXT:
;; CHECK-NEXT:   --once-reduction                              reduces calls to code that only
;; CHECK-NEXT:                                                 runs once
;; CHECK-NEXT:
;; CHECK-NEXT:   --optimize-added-constants                    optimizes added constants into
;; CHECK-NEXT:                                                 load/store offsets
;; CHECK-NEXT:
;; CHECK-NEXT:   --optimize-added-constants-propagate          optimizes added constants into
;; CHECK-NEXT:                                                 load/store offsets, propagating
;; CHECK-NEXT:                                                 them across locals too
;; CHECK-NEXT:
;; CHECK-NEXT:   --optimize-casts                              eliminate and reuse casts
;; CHECK-NEXT:
;; CHECK-NEXT:   --optimize-for-js                             early optimize of the
;; CHECK-NEXT:                                                 instruction combinations for js
;; CHECK-NEXT:
;; CHECK-NEXT:   --optimize-instructions                       optimizes instruction
;; CHECK-NEXT:                                                 combinations
;; CHECK-NEXT:
;; CHECK-NEXT:   --optimize-stack-ir                           optimize Stack IR
;; CHECK-NEXT:
;; CHECK-NEXT:   --pick-load-signs                             pick load signs based on their
;; CHECK-NEXT:                                                 uses
;; CHECK-NEXT:
;; CHECK-NEXT:   --poppify                                     Tranform Binaryen IR into Poppy
;; CHECK-NEXT:                                                 IR
;; CHECK-NEXT:
;; CHECK-NEXT:   --post-emscripten                             miscellaneous optimizations for
;; CHECK-NEXT:                                                 Emscripten-generated code
;; CHECK-NEXT:
;; CHECK-NEXT:   --precompute                                  computes compile-time
;; CHECK-NEXT:                                                 evaluatable expressions
;; CHECK-NEXT:
;; CHECK-NEXT:   --precompute-propagate                        computes compile-time
;; CHECK-NEXT:                                                 evaluatable expressions and
;; CHECK-NEXT:                                                 propagates them through locals
;; CHECK-NEXT:
;; CHECK-NEXT:   --print                                       print in s-expression format
;; CHECK-NEXT:
;; CHECK-NEXT:   --print-call-graph                            print call graph
;; CHECK-NEXT:
;; CHECK-NEXT:   --print-features                              print options for enabled
;; CHECK-NEXT:                                                 features
;; CHECK-NEXT:
;; CHECK-NEXT:   --print-full                                  print in full s-expression
;; CHECK-NEXT:                                                 format
;; CHECK-NEXT:
;; CHECK-NEXT:   --print-function-map                          print a map of function indexes
;; CHECK-NEXT:                                                 to names
;; CHECK-NEXT:
;; CHECK-NEXT:   --print-minified                              print in minified s-expression
;; CHECK-NEXT:                                                 format
;; CHECK-NEXT:
;; CHECK-NEXT:   --print-stack-ir                              print out Stack IR (useful for
;; CHECK-NEXT:                                                 internal debugging)
;; CHECK-NEXT:
;; CHECK-NEXT:   --remove-imports                              removes imports and replaces
;; CHECK-NEXT:                                                 them with nops
;; CHECK-NEXT:
;; CHECK-NEXT:   --remove-memory                               removes memory segments
;; CHECK-NEXT:
;; CHECK-NEXT:   --remove-non-js-ops                           removes operations incompatible
;; CHECK-NEXT:                                                 with js
;; CHECK-NEXT:
;; CHECK-NEXT:   --remove-unused-brs                           removes breaks from locations
;; CHECK-NEXT:                                                 that are not needed
;; CHECK-NEXT:
;; CHECK-NEXT:   --remove-unused-module-elements               removes unused module elements
;; CHECK-NEXT:
;; CHECK-NEXT:   --remove-unused-names                         removes names from locations
;; CHECK-NEXT:                                                 that are never branched to
;; CHECK-NEXT:
;; CHECK-NEXT:   --remove-unused-nonfunction-module-elements   removes unused module elements
;; CHECK-NEXT:                                                 that are not functions
;; CHECK-NEXT:
;; CHECK-NEXT:   --remove-unused-types                         remove unused private GC types
;; CHECK-NEXT:
;; CHECK-NEXT:   --reorder-functions                           sorts functions by access
;; CHECK-NEXT:                                                 frequency
;; CHECK-NEXT:
;; CHECK-NEXT:   --reorder-globals                             sorts globals by access
;; CHECK-NEXT:                                                 frequency
;; CHECK-NEXT:
;; CHECK-NEXT:   --reorder-locals                              sorts locals by access frequency
;; CHECK-NEXT:
;; CHECK-NEXT:   --rereloop                                    re-optimize control flow using
;; CHECK-NEXT:                                                 the relooper algorithm
;; CHECK-NEXT:
;; CHECK-NEXT:   --roundtrip                                   write the module to binary, then
;; CHECK-NEXT:                                                 read it
;; CHECK-NEXT:
;; CHECK-NEXT:   --rse                                         remove redundant local.sets
;; CHECK-NEXT:
;; CHECK-NEXT:   --safe-heap                                   instrument loads and stores to
;; CHECK-NEXT:                                                 check for invalid behavior
;; CHECK-NEXT:
;; CHECK