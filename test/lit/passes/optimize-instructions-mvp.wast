
;; NOTE: Assertions have been generated by update_lit_checks.py and should not be edited.
;; RUN: wasm-opt %s --optimize-instructions --mvp-features -S -o - | filecheck %s

(module
  (memory 0)
  ;; CHECK:      (type $0 (func (param i32 i64)))
  (type $0 (func (param i32 i64)))

  ;; CHECK:      (import "a" "b" (func $get-f64 (result f64)))
  (import "a" "b" (func $get-f64 (result f64)))

  ;; CHECK:      (func $and-and (param $i1 i32) (result i32)
  ;; CHECK-NEXT:  (i32.and
  ;; CHECK-NEXT:   (local.get $i1)
  ;; CHECK-NEXT:   (i32.const 1)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $and-and (param $i1 i32) (result i32)
    (i32.and
      (i32.and
        (local.get $i1)
        (i32.const 5)
      )
      (i32.const 3)
    )
  )
  ;; CHECK:      (func $or-or (param $i1 i32) (result i32)
  ;; CHECK-NEXT:  (i32.or
  ;; CHECK-NEXT:   (local.get $i1)
  ;; CHECK-NEXT:   (i32.const 3)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $or-or (param $i1 i32) (result i32)
    (i32.or
      (i32.or
        (local.get $i1)
        (i32.const 1)
      )
      (i32.const 2)
    )
  )
  ;; CHECK:      (func $xor-xor (param $i1 i32) (result i32)
  ;; CHECK-NEXT:  (i32.xor
  ;; CHECK-NEXT:   (local.get $i1)
  ;; CHECK-NEXT:   (i32.const 5)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $xor-xor (param $i1 i32) (result i32)
    (i32.xor
      (i32.xor
        (local.get $i1)
        (i32.const -2)
      )
      (i32.const -5)
    )
  )
  ;; CHECK:      (func $mul-mul (param $i1 i32) (result i32)
  ;; CHECK-NEXT:  (i32.mul
  ;; CHECK-NEXT:   (local.get $i1)
  ;; CHECK-NEXT:   (i32.const -10)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $mul-mul (param $i1 i32) (result i32)
    (i32.mul
      (i32.mul
        (local.get $i1)
        (i32.const -2)
      )
      (i32.const 5)
    )
  )
  ;; overflow also valid
  ;; CHECK:      (func $mul-mul-overflow (param $i1 i32) (result i32)
  ;; CHECK-NEXT:  (i32.mul
  ;; CHECK-NEXT:   (local.get $i1)
  ;; CHECK-NEXT:   (i32.const -133169153)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $mul-mul-overflow (param $i1 i32) (result i32)
    (i32.mul
      (i32.mul
        (local.get $i1)
        (i32.const 0xfffff)
      )
      (i32.const 0x8000001)
    )
  )
  ;; CHECK:      (func $if-eqz-one-arm (param $i1 i32)
  ;; CHECK-NEXT:  (if
  ;; CHECK-NEXT:   (i32.eqz
  ;; CHECK-NEXT:    (local.get $i1)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:   (drop
  ;; CHECK-NEXT:    (i32.const 10)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $if-eqz-one-arm (param $i1 i32)
    (if
      (i32.eqz
        (local.get $i1)
      )
      (drop
        (i32.const 10)
      )
    )
  )
  ;; CHECK:      (func $if-eqz-two-arms (param $i1 i32)
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (if (result i32)
  ;; CHECK-NEXT:    (local.get $i1)
  ;; CHECK-NEXT:    (i32.const 12)
  ;; CHECK-NEXT:    (i32.const 11)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $if-eqz-two-arms (param $i1 i32)
    (if
      (i32.eqz
        (local.get $i1)
      )
      (drop
        (i32.const 11)
      )
      (drop
        (i32.const 12)
      )
    )
  )
  ;; CHECK:      (func $if-eqz-two-arms-i64 (param $i2 i64)
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (if (result i32)
  ;; CHECK-NEXT:    (i64.eqz
  ;; CHECK-NEXT:     (local.get $i2)
  ;; CHECK-NEXT:    )
  ;; CHECK-NEXT:    (i32.const 11)
  ;; CHECK-NEXT:    (i32.const 12)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $if-eqz-two-arms-i64 (param $i2 i64)
    (if
      (i64.eqz
        (local.get $i2)
      )
      (drop
        (i32.const 11)
      )
      (drop
        (i32.const 12)
      )
    )
  )
  ;; CHECK:      (func $eqz-gt_s (result i32)
  ;; CHECK-NEXT:  (i32.eqz
  ;; CHECK-NEXT:   (i32.const 0)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $eqz-gt_s (result i32)
    (i32.eqz
      (i32.gt_s
        (i32.const 1)
        (i32.const 2)
      )
    )
  )
  ;; CHECK:      (func $eqz-ge_s (result i32)
  ;; CHECK-NEXT:  (i32.eqz
  ;; CHECK-NEXT:   (i32.const 0)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $eqz-ge_s (result i32)
    (i32.eqz
      (i32.ge_s
        (i32.const 1)
        (i32.const 2)
      )
    )
  )
  ;; CHECK:      (func $eqz-lt_s (result i32)
  ;; CHECK-NEXT:  (i32.eqz
  ;; CHECK-NEXT:   (i32.const 1)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $eqz-lt_s (result i32)
    (i32.eqz
      (i32.lt_s
        (i32.const 1)
        (i32.const 2)
      )
    )
  )
  ;; CHECK:      (func $eqz-le_s (result i32)
  ;; CHECK-NEXT:  (i32.eqz
  ;; CHECK-NEXT:   (i32.const 1)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $eqz-le_s (result i32)
    (i32.eqz
      (i32.le_s
        (i32.const 1)
        (i32.const 2)
      )
    )
  )
  ;; CHECK:      (func $eqz-gt_u (result i32)
  ;; CHECK-NEXT:  (i32.eqz
  ;; CHECK-NEXT:   (i32.const 0)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $eqz-gt_u (result i32)
    (i32.eqz
      (i32.gt_u
        (i32.const 1)
        (i32.const 2)
      )
    )
  )
  ;; CHECK:      (func $eqz-ge_u (result i32)
  ;; CHECK-NEXT:  (i32.eqz
  ;; CHECK-NEXT:   (i32.const 0)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $eqz-ge_u (result i32)
    (i32.eqz
      (i32.ge_u
        (i32.const 1)
        (i32.const 2)
      )
    )
  )
  ;; CHECK:      (func $eqz-lt_u (result i32)
  ;; CHECK-NEXT:  (i32.eqz
  ;; CHECK-NEXT:   (i32.const 1)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $eqz-lt_u (result i32)
    (i32.eqz
      (i32.lt_u
        (i32.const 1)
        (i32.const 2)
      )
    )
  )
  ;; CHECK:      (func $eqz-le_u (result i32)
  ;; CHECK-NEXT:  (i32.eqz
  ;; CHECK-NEXT:   (i32.const 1)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $eqz-le_u (result i32)
    (i32.eqz
      (i32.le_u
        (i32.const 1)
        (i32.const 2)
      )
    )
  )
  ;; CHECK:      (func $eqz-gt (result i32)
  ;; CHECK-NEXT:  (i32.eqz
  ;; CHECK-NEXT:   (f32.gt
  ;; CHECK-NEXT:    (f32.const 1)
  ;; CHECK-NEXT:    (f32.const 2)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $eqz-gt (result i32)
    (i32.eqz
      (f32.gt
        (f32.const 1)
        (f32.const 2)
      )
    )
  )
  ;; CHECK:      (func $eqz-ge (result i32)
  ;; CHECK-NEXT:  (i32.eqz
  ;; CHECK-NEXT:   (f32.ge
  ;; CHECK-NEXT:    (f32.const 1)
  ;; CHECK-NEXT:    (f32.const 2)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $eqz-ge (result i32)
    (i32.eqz
      (f32.ge
        (f32.const 1)
        (f32.const 2)
      )
    )
  )
  ;; CHECK:      (func $eqz-lt (result i32)
  ;; CHECK-NEXT:  (i32.eqz
  ;; CHECK-NEXT:   (f32.lt
  ;; CHECK-NEXT:    (f32.const 1)
  ;; CHECK-NEXT:    (f32.const 2)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $eqz-lt (result i32)
    (i32.eqz
      (f32.lt
        (f32.const 1)
        (f32.const 2)
      )
    )
  )
  ;; CHECK:      (func $eqz-le (result i32)
  ;; CHECK-NEXT:  (i32.eqz
  ;; CHECK-NEXT:   (f32.le
  ;; CHECK-NEXT:    (f32.const 1)
  ;; CHECK-NEXT:    (f32.const 2)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $eqz-le (result i32)
    (i32.eqz
      (f32.le
        (f32.const 1)
        (f32.const 2)
      )
    )
  )
  ;; CHECK:      (func $eqz-gt-f64 (result i32)
  ;; CHECK-NEXT:  (i32.eqz
  ;; CHECK-NEXT:   (f64.gt
  ;; CHECK-NEXT:    (f64.const 1)
  ;; CHECK-NEXT:    (f64.const 2)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $eqz-gt-f64 (result i32)
    (i32.eqz
      (f64.gt
        (f64.const 1)
        (f64.const 2)
      )
    )
  )
  ;; CHECK:      (func $eqz-ge-f64 (result i32)
  ;; CHECK-NEXT:  (i32.eqz
  ;; CHECK-NEXT:   (f64.ge
  ;; CHECK-NEXT:    (f64.const 1)
  ;; CHECK-NEXT:    (f64.const 2)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $eqz-ge-f64 (result i32)
    (i32.eqz
      (f64.ge
        (f64.const 1)
        (f64.const 2)
      )
    )
  )
  ;; CHECK:      (func $eqz-lt-f64 (result i32)
  ;; CHECK-NEXT:  (i32.eqz
  ;; CHECK-NEXT:   (f64.lt
  ;; CHECK-NEXT:    (f64.const 1)
  ;; CHECK-NEXT:    (f64.const 2)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $eqz-lt-f64 (result i32)
    (i32.eqz
      (f64.lt
        (f64.const 1)
        (f64.const 2)
      )
    )
  )
  ;; CHECK:      (func $eqz-le-f64 (result i32)
  ;; CHECK-NEXT:  (i32.eqz
  ;; CHECK-NEXT:   (f64.le
  ;; CHECK-NEXT:    (f64.const 1)
  ;; CHECK-NEXT:    (f64.const 2)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $eqz-le-f64 (result i32)
    (i32.eqz
      (f64.le
        (f64.const 1)
        (f64.const 2)
      )
    )
  )
  ;; CHECK:      (func $eqz-eq (result i32)
  ;; CHECK-NEXT:  (f32.ne
  ;; CHECK-NEXT:   (f32.const 1)
  ;; CHECK-NEXT:   (f32.const 2)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $eqz-eq (result i32)
    (i32.eqz
      (f32.eq
        (f32.const 1)
        (f32.const 2)
      )
    )
  )
  ;; CHECK:      (func $eqz-ne (result i32)
  ;; CHECK-NEXT:  (f32.eq
  ;; CHECK-NEXT:   (f32.const 1)
  ;; CHECK-NEXT:   (f32.const 2)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $eqz-ne (result i32)
    (i32.eqz
      (f32.ne
        (f32.const 1)
        (f32.const 2)
      )
    )
  )
  ;; CHECK:      (func $eqz-eq-f64 (result i32)
  ;; CHECK-NEXT:  (f64.ne
  ;; CHECK-NEXT:   (f64.const 1)
  ;; CHECK-NEXT:   (f64.const 2)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $eqz-eq-f64 (result i32)
    (i32.eqz
      (f64.eq
        (f64.const 1)
        (f64.const 2)
      )
    )
  )
  ;; CHECK:      (func $eqz-ne-f64 (result i32)
  ;; CHECK-NEXT:  (f64.eq
  ;; CHECK-NEXT:   (f64.const 1)
  ;; CHECK-NEXT:   (f64.const 2)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $eqz-ne-f64 (result i32)
    (i32.eqz
      (f64.ne
        (f64.const 1)
        (f64.const 2)
      )
    )
  )

  ;; we handle only 0 in the right position, as we assume a const is there, and
  ;; don't care about whether both are consts here (precompute does that, so no
  ;; need)
  ;; CHECK:      (func $eq-zero-rhs (result i32)
  ;; CHECK-NEXT:  (i32.eqz
  ;; CHECK-NEXT:   (i32.const 100)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $eq-zero-rhs (result i32)
    (i32.eq
      (i32.const 100)
      (i32.const 0)
    )
  )
  ;; CHECK:      (func $eq-zero-lhs (result i32)
  ;; CHECK-NEXT:  (i32.const 0)
  ;; CHECK-NEXT: )
  (func $eq-zero-lhs (result i32)
    (i32.eq
      (i32.const 0)
      (i32.const 100)
    )
  )
  ;; CHECK:      (func $eq-zero-zero (result i32)
  ;; CHECK-NEXT:  (i32.eqz
  ;; CHECK-NEXT:   (i32.const 0)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $eq-zero-zero (result i32)
    (i32.eq
      (i32.const 0)
      (i32.const 0)
    )
  )
  ;; CHECK:      (func $eq-zero-rhs-i64 (result i32)
  ;; CHECK-NEXT:  (i64.eqz
  ;; CHECK-NEXT:   (i64.const 100)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $eq-zero-rhs-i64 (result i32)
    (i64.eq
      (i64.const 100)
      (i64.const 0)
    )
  )
  ;; CHECK:      (func $eq-zero-lhs-i64 (result i32)
  ;; CHECK-NEXT:  (i32.const 0)
  ;; CHECK-NEXT: )
  (func $eq-zero-lhs-i64 (result i32)
    (i64.eq
      (i64.const 0)
      (i64.const 100)
    )
  )
  ;; CHECK:      (func $eq-zero-zero-i64 (result i32)
  ;; CHECK-NEXT:  (i64.eqz
  ;; CHECK-NEXT:   (i64.const 0)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $eq-zero-zero-i64 (result i32)
    (i64.eq
      (i64.const 0)
      (i64.const 0)
    )
  )
  ;; CHECK:      (func $if-eqz-eqz
  ;; CHECK-NEXT:  (if
  ;; CHECK-NEXT:   (i32.const 123)
  ;; CHECK-NEXT:   (nop)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $if-eqz-eqz
    (if
      (i32.eqz
        (i32.eqz
          (i32.const 123)
        )
      )
      (nop)
    )
  )
  ;; CHECK:      (func $select-eqz (param $i1 i32) (result i32)
  ;; CHECK-NEXT:  (select
  ;; CHECK-NEXT:   (i32.const 102)
  ;; CHECK-NEXT:   (i32.const 101)
  ;; CHECK-NEXT:   (local.get $i1)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $select-eqz (param $i1 i32) (result i32)
    (select
      (i32.const 101)
      (i32.const 102)
      (i32.eqz
        (local.get $i1)
      )
    )
  )
  ;; CHECK:      (func $select-eqz-noreorder (param $i1 i32) (result i32)
  ;; CHECK-NEXT:  (select
  ;; CHECK-NEXT:   (local.tee $i1
  ;; CHECK-NEXT:    (i32.const 103)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:   (local.tee $i1
  ;; CHECK-NEXT:    (i32.const 104)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:   (i32.eqz
  ;; CHECK-NEXT:    (local.get $i1)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $select-eqz-noreorder (param $i1 i32) (result i32)
    (select
      (local.tee $i1
        (i32.const 103)
      ) ;; these conflict
      (local.tee $i1
        (i32.const 104)
      )
      (i32.eqz
        (local.get $i1)
      )
    )
  )
  ;; CHECK:      (func $select-eqz-eqz (result i32)
  ;; CHECK-NEXT:  (i32.const 0)
  ;; CHECK-NEXT: )
  (func $select-eqz-eqz (result i32)
    (select
      (i32.const 0)
      (i32.const 1)
      (i32.eqz
        (i32.eqz
          (i32.const 2)
        )
      )
    )
  )
  ;; CHECK:      (func $select-sign-32-lt (param $x i32) (result i32)
  ;; CHECK-NEXT:  (i32.or
  ;; CHECK-NEXT:   (i32.shr_s
  ;; CHECK-NEXT:    (local.get $x)
  ;; CHECK-NEXT:    (i32.const 31)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:   (i32.const 1)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $select-sign-32-lt (param $x i32) (result i32)
    (select
      (i32.const -1)
      (i32.const 1)
      (i32.lt_s
        (local.get $x)
        (i32.const 0)
      )
    )
  )
  ;; CHECK:      (func $select-sign-32-ge (param $x i32) (result i32)
  ;; CHECK-NEXT:  (i32.or
  ;; CHECK-NEXT:   (i32.shr_s
  ;; CHECK-NEXT:    (local.get $x)
  ;; CHECK-NEXT:    (i32.const 31)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:   (i32.const 1)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $select-sign-32-ge (param $x i32) (result i32)
    (select
      (i32.const 1)
      (i32.const -1)
      (i32.ge_s
        (local.get $x)
        (i32.const 0)
      )
    )
  )
  ;; CHECK:      (func $select-sign-64-lt (param $x i64) (result i64)
  ;; CHECK-NEXT:  (i64.or
  ;; CHECK-NEXT:   (i64.shr_s
  ;; CHECK-NEXT:    (local.get $x)
  ;; CHECK-NEXT:    (i64.const 63)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:   (i64.const 1)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $select-sign-64-lt (param $x i64) (result i64)
    (select
      (i64.const -1)
      (i64.const 1)
      (i64.lt_s
        (local.get $x)
        (i64.const 0)
      )
    )
  )
  ;; CHECK:      (func $select-sign-64-ge (param $x i64) (result i64)
  ;; CHECK-NEXT:  (i64.or
  ;; CHECK-NEXT:   (i64.shr_s
  ;; CHECK-NEXT:    (local.get $x)
  ;; CHECK-NEXT:    (i64.const 63)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:   (i64.const 1)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $select-sign-64-ge (param $x i64) (result i64)
    (select
      (i64.const 1)
      (i64.const -1)
      (i64.ge_s
        (local.get $x)
        (i64.const 0)
      )
    )
  )
  ;; CHECK:      (func $select-sign-lt-skip-1 (param $x i32) (result i64)
  ;; CHECK-NEXT:  (select
  ;; CHECK-NEXT:   (i64.const -1)
  ;; CHECK-NEXT:   (i64.const 1)
  ;; CHECK-NEXT:   (i32.lt_s
  ;; CHECK-NEXT:    (local.get $x)
  ;; CHECK-NEXT:    (i32.const 0)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $select-sign-lt-skip-1 (param $x i32) (result i64)
    (select
      (i64.const -1)
      (i64.const 1)
      (i32.lt_s
        (local.get $x)
        (i32.const 0)
      )
    )
  )
  ;; CHECK:      (func $select-sign-lt-skip-2 (param $x i64) (result i32)
  ;; CHECK-NEXT:  (select
  ;; CHECK-NEXT:   (i32.const -1)
  ;; CHECK-NEXT:   (i32.const 1)
  ;; CHECK-NEXT:   (i64.lt_s
  ;; CHECK-NEXT:    (local.get $x)
  ;; CHECK-NEXT:    (i64.const 0)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $select-sign-lt-skip-2 (param $x i64) (result i32)
    (select
      (i32.const -1)
      (i32.const 1)
      (i64.lt_s
        (local.get $x)
        (i64.const 0)
      )
    )
  )
  ;; CHECK:      (func $select-or (param $x i32) (param $y i32) (result i32)
  ;; CHECK-NEXT:  (i32.or
  ;; CHECK-NEXT:   (i32.and
  ;; CHECK-NEXT:    (local.get $x)
  ;; CHECK-NEXT:    (i32.const 1)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:   (i32.eq
  ;; CHECK-NEXT:    (local.get $y)
  ;; CHECK-NEXT:    (i32.const 1337)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $select-or (param $x i32) (param $y i32) (result i32)
    (select
      (i32.const 1)
      (i32.eq
        (local.get $y)
        (i32.const 1337)
      )
      (i32.and
        (local.get $x)
        (i32.const 1)
      )
    )
  )
  ;; CHECK:      (func $select-and-eqz (param $x i32) (param $y i32) (result i32)
  ;; CHECK-NEXT:  (i32.eqz
  ;; CHECK-NEXT:   (i32.or
  ;; CHECK-NEXT:    (local.get $x)
  ;; CHECK-NEXT:    (local.get $y)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $select-and-eqz (param $x i32) (param $y i32) (result i32)
    (select
      (i32.eqz
        (local.get $x)
      )
      (i32.const 0)
      (i32.eqz
        (local.get $y)
      )
    )
  )
  ;; CHECK:      (func $select-or-side-effects (param $x i32) (param $y i32) (result i32)
  ;; CHECK-NEXT:  (i32.or
  ;; CHECK-NEXT:   (i32.eq
  ;; CHECK-NEXT:    (call $select-or-side-effects
  ;; CHECK-NEXT:     (local.get $x)
  ;; CHECK-NEXT:     (local.get $y)
  ;; CHECK-NEXT:    )
  ;; CHECK-NEXT:    (i32.const 1337)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:   (i32.and
  ;; CHECK-NEXT:    (call $select-or-side-effects
  ;; CHECK-NEXT:     (local.get $y)
  ;; CHECK-NEXT:     (local.get $x)
  ;; CHECK-NEXT:    )
  ;; CHECK-NEXT:    (i32.const 1)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $select-or-side-effects (param $x i32) (param $y i32) (result i32)
    ;; When there are side effects, the order of the operations must remain
    ;; correct.
    (select
      (i32.const 1)
      (i32.eq
        (call $select-or-side-effects
          (local.get $x)
          (local.get $y)
        )
        (i32.const 1337)
      )
      (i32.and
        (call $select-or-side-effects
          (local.get $y)
          (local.get $x)
        )
        (i32.const 1)
      )
    )
  )
  ;; CHECK:      (func $select-or-no-bits (param $x i32) (param $y i32)
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (select
  ;; CHECK-NEXT:    (i32.const 2)
  ;; CHECK-NEXT:    (i32.eq
  ;; CHECK-NEXT:     (local.get $y)
  ;; CHECK-NEXT:     (i32.const 1337)
  ;; CHECK-NEXT:    )
  ;; CHECK-NEXT:    (i32.eq
  ;; CHECK-NEXT:     (local.get $x)
  ;; CHECK-NEXT:     (i32.const 42)
  ;; CHECK-NEXT:    )
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (select
  ;; CHECK-NEXT:    (i32.const 1)
  ;; CHECK-NEXT:    (local.get $y)
  ;; CHECK-NEXT:    (i32.eq
  ;; CHECK-NEXT:     (local.get $x)
  ;; CHECK-NEXT:     (i32.const 42)
  ;; CHECK-NEXT:    )
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (select
  ;; CHECK-NEXT:    (i32.const 1)
  ;; CHECK-NEXT:    (i32.eq
  ;; CHECK-NEXT:     (local.get $y)
  ;; CHECK-NEXT:     (i32.const 1337)
  ;; CHECK-NEXT:    )
  ;; CHECK-NEXT:    (local.get $x)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $select-or-no-bits (param $x i32) (param $y i32)
    ;; The following cannot be optimized into an "or" operation due to maxBits
    ;; not being known to be 1.
    (drop
      (select
        ;; Too many bits in ifTrue
        (i32.const 2)
        (i32.eq
          (local.get $y)
          (i32.const 1337)
        )
        (i32.eq
          (local.get $x)
          (i32.const 42)
        )
      )
    )
    (drop
      (select
        (i32.const 1)
        ;; Too many bits in ifFalse
        (local.get $y)
        (i32.eq
          (local.get $x)
          (i32.const 42)
        )
      )
    )
    (drop
      (select
        (i32.const 1)
        (i32.eq
          (local.get $y)
          (i32.const 1337)
        )
        ;; Too many bits in condition
        (local.get $x)
      )
    )
  )
  ;; CHECK:      (func $select-or-no-type (param $x i32) (param $y i64) (result i64)
  ;; CHECK-NEXT:  (select
  ;; CHECK-NEXT:   (i64.const 1)
  ;; CHECK-NEXT:   (i64.and
  ;; CHECK-NEXT:    (local.get $y)
  ;; CHECK-NEXT:    (i64.const 1)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:   (i32.and
  ;; CHECK-NEXT:    (local.get $x)
  ;; CHECK-NEXT:    (i32.const 1)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $select-or-no-type (param $x i32) (param $y i64) (result i64)
    ;; An i64 result cannot be optimized into an "or" of the ifTrue and the
    ;; condition due to their types being different.
    (select
      (i64.const 1)
      (i64.and
        (local.get $y)
        (i64.const 1)
      )
      (i32.and
        (local.get $x)
        (i32.const 1)
      )
    )
  )
  ;; CHECK:      (func $select-or-negation (param $x i32) (param $y i32) (result i32)
  ;; CHECK-NEXT:  (i32.and
  ;; CHECK-NEXT:   (i32.eq
  ;; CHECK-NEXT:    (local.get $y)
  ;; CHECK-NEXT:    (i32.const 1337)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:   (i32.ge_u
  ;; CHECK-NEXT:    (local.get $x)
  ;; CHECK-NEXT:    (i32.const 20)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $select-or-negation (param $x i32) (param $y i32) (result i32)
    (select
      ;; We can turn this select into an and by negating the condition.
      (i32.const 0)
      (i32.eq
        (local.get $y)
        (i32.const 1337)
      )
      (i32.lt_u
        (local.get $x)
        (i32.const 20)
      )
    )
  )
  ;; CHECK:      (func $select-or-no-const (param $x i32) (param $y i32) (result i32)
  ;; CHECK-NEXT:  (select
  ;; CHECK-NEXT:   (i32.const 2)
  ;; CHECK-NEXT:   (i32.eq
  ;; CHECK-NEXT:    (local.get $y)
  ;; CHECK-NEXT:    (i32.const 1337)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:   (i32.and
  ;; CHECK-NEXT:    (local.get $x)
  ;; CHECK-NEXT:    (i32.const 1)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $select-or-no-const (param $x i32) (param $y i32) (result i32)
    (select
      ;; The wrong const (should be 0 or 1).
      (i32.const 2)
      (i32.eq
        (local.get $y)
        (i32.const 1337)
      )
      (i32.and
        (local.get $x)
        (i32.const 1)
      )
    )
  )
  ;; CHECK:      (func $select-and (param $x i32) (param $y i32) (result i32)
  ;; CHECK-NEXT:  (i32.and
  ;; CHECK-NEXT:   (i32.eq
  ;; CHECK-NEXT:    (local.get $y)
  ;; CHECK-NEXT:    (i32.const 1337)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:   (i32.eq
  ;; CHECK-NEXT:    (local.get $x)
  ;; CHECK-NEXT:    (i32.const 42)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $select-and (param $x i32) (param $y i32) (result i32)
    (select
      (i32.eq
        (local.get $y)
        (i32.const 1337)
      )
      (i32.const 0)
      (i32.eq
        (local.get $x)
        (i32.const 42)
      )
    )
  )
  ;; CHECK:      (func $select-and-negation (param $x i32) (param $y i32) (result i32)
  ;; CHECK-NEXT:  (i32.or
  ;; CHECK-NEXT:   (i32.eq
  ;; CHECK-NEXT:    (local.get $y)
  ;; CHECK-NEXT:    (i32.const 1337)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:   (i32.ne
  ;; CHECK-NEXT:    (local.get $x)
  ;; CHECK-NEXT:    (i32.const 42)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $select-and-negation (param $x i32) (param $y i32) (result i32)
    (select
      (i32.eq
        (local.get $y)
        (i32.const 1337)
      )
      ;; With a 1 here, we negate the condition.
      (i32.const 1)
      (i32.eq
        (local.get $x)
        (i32.const 42)
      )
    )
  )
  ;; CHECK:      (func $select-and-negation-impossible (param $x i32) (param $y i32) (result i32)
  ;; CHECK-NEXT:  (select
  ;; CHECK-NEXT:   (i32.eq
  ;; CHECK-NEXT:    (local.get $y)
  ;; CHECK-NEXT:    (i32.const 1337)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:   (i32.const 1)
  ;; CHECK-NEXT:   (i32.shr_u
  ;; CHECK-NEXT:    (local.get $x)
  ;; CHECK-NEXT:    (i32.const 31)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $select-and-negation-impossible (param $x i32) (param $y i32) (result i32)
    (select
      (i32.eq
        (local.get $y)
        (i32.const 1337)
      )
      ;; With a 1 here, we must negate the condition, but the condition here
      ;; cannot be negated in a simple way, so skip.
      (i32.const 1)
      (i32.shr_u
        (local.get $x)
        (i32.const 31)
      )
    )
  )
  ;; CHECK:      (func $select-and-negation-impossible-float (param $x f64) (param $y i32) (result i32)
  ;; CHECK-NEXT:  (select
  ;; CHECK-NEXT:   (i32.eq
  ;; CHECK-NEXT:    (local.get $y)
  ;; CHECK-NEXT:    (i32.const 1337)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:   (i32.const 1)
  ;; CHECK-NEXT:   (f64.le
  ;; CHECK-NEXT:    (local.get $x)
  ;; CHECK-NEXT:    (f64.const 3.14159)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $select-and-negation-impossible-float (param $x f64) (param $y i32) (result i32)
    (select
      (i32.eq
        (local.get $y)
        (i32.const 1337)
      )
      ;; With a 1 here, we must negate the condition, but the condition here
      ;; cannot be negated due to it operating on floats (where NaNs cause
      ;; difficulties), so we skip.
      (i32.const 1)
      (f64.le
        (local.get $x)
        (f64.const 3.14159)
      )
    )
  )
  ;; CHECK:      (func $select-and-no-const (param $x i32) (param $y i32) (result i32)
  ;; CHECK-NEXT:  (select
  ;; CHECK-NEXT:   (i32.const 2)
  ;; CHECK-NEXT:   (i32.eq
  ;; CHECK-NEXT:    (local.get $y)
  ;; CHECK-NEXT:    (i32.const 1337)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:   (i32.ne
  ;; CHECK-NEXT:    (local.get $x)
  ;; CHECK-NEXT:    (i32.const 42)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $select-and-no-const (param $x i32) (param $y i32) (result i32)
    (select
      (i32.eq
        (local.get $y)
        (i32.const 1337)
      )
      ;; The wrong constant (should be 0 or 1).
      (i32.const 2)
      (i32.eq
        (local.get $x)
        (i32.const 42)
      )
    )
  )
  ;; CHECK:      (func $load8_s-and-255 (result i32)
  ;; CHECK-NEXT:  (i32.load8_u
  ;; CHECK-NEXT:   (i32.const 0)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $load8_s-and-255 (result i32)
    (i32.and (i32.load8_s (i32.const 0)) (i32.const 255))
  )
  ;; CHECK:      (func $load8_u-and-255 (result i32)
  ;; CHECK-NEXT:  (i32.load8_u
  ;; CHECK-NEXT:   (i32.const 1)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $load8_u-and-255 (result i32)
    (i32.and (i32.load8_u (i32.const 1)) (i32.const 255))
  )
  ;; CHECK:      (func $load8_s-and-254 (result i32)
  ;; CHECK-NEXT:  (i32.and
  ;; CHECK-NEXT:   (i32.load8_s
  ;; CHECK-NEXT:    (i32.const 2)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:   (i32.const 254)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $load8_s-and-254 (result i32)
    (i32.and (i32.load8_s (i32.const 2)) (i32.const 254))
  )
  ;; CHECK:      (func $load8_u-and-1 (result i32)
  ;; CHECK-NEXT:  (i32.and
  ;; CHECK-NEXT:   (i32.load8_u
  ;; CHECK-NEXT:    (i32.const 3)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:   (i32.const 1)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $load8_u-and-1 (result i32)
    (i32.and (i32.load8_u (i32.const 3)) (i32.const 1))
  )
  ;; CHECK:      (func $load16_s-and-65535 (result i32)
  ;; CHECK-NEXT:  (i32.load16_u
  ;; CHECK-NEXT:   (i32.const 4)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $load16_s-and-65535 (result i32)
    (i32.and (i32.load16_s (i32.const 4)) (i32.const 65535))
  )
  ;; CHECK:      (func $load16_u-and-65535 (result i32)
  ;; CHECK-NEXT:  (i32.load16_u
  ;; CHECK-NEXT:   (i32.const 5)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $load16_u-and-65535 (result i32)
    (i32.and (i32.load16_u (i32.const 5)) (i32.const 65535))
  )
  ;; CHECK:      (func $load16_s-and-65534 (result i32)
  ;; CHECK-NEXT:  (i32.and
  ;; CHECK-NEXT:   (i32.load16_s
  ;; CHECK-NEXT:    (i32.const 6)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:   (i32.const 65534)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $load16_s-and-65534 (result i32)
    (i32.and (i32.load16_s (i32.const 6)) (i32.const 65534))
  )
  ;; CHECK:      (func $load16_u-and-1 (result i32)
  ;; CHECK-NEXT:  (i32.and
  ;; CHECK-NEXT:   (i32.load16_u
  ;; CHECK-NEXT:    (i32.const 7)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:   (i32.const 1)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $load16_u-and-1 (result i32)
    (i32.and (i32.load16_u (i32.const 7)) (i32.const 1))
  )
  ;; CHECK:      (func $store8-and-255
  ;; CHECK-NEXT:  (i32.store8
  ;; CHECK-NEXT:   (i32.const 8)
  ;; CHECK-NEXT:   (i32.const -1)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $store8-and-255
    (i32.store8 (i32.const 8) (i32.and (i32.const -1) (i32.const 255)))
  )
  ;; CHECK:      (func $store8-and-254
  ;; CHECK-NEXT:  (i32.store8
  ;; CHECK-NEXT:   (i32.const 9)
  ;; CHECK-NEXT:   (i32.and
  ;; CHECK-NEXT:    (i32.const -2)
  ;; CHECK-NEXT:    (i32.const 254)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $store8-and-254
    (i32.store8 (i32.const 9) (i32.and (i32.const -2) (i32.const 254)))
  )
  ;; CHECK:      (func $store16-and-65535
  ;; CHECK-NEXT:  (i32.store16
  ;; CHECK-NEXT:   (i32.const 10)
  ;; CHECK-NEXT:   (i32.const -3)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $store16-and-65535
    (i32.store16 (i32.const 10) (i32.and (i32.const -3) (i32.const 65535)))
  )
  ;; CHECK:      (func $store16-and-65534
  ;; CHECK-NEXT:  (i32.store16
  ;; CHECK-NEXT:   (i32.const 11)
  ;; CHECK-NEXT:   (i32.and
  ;; CHECK-NEXT:    (i32.const -4)
  ;; CHECK-NEXT:    (i32.const 65534)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $store16-and-65534
    (i32.store16 (i32.const 11) (i32.and (i32.const -4) (i32.const 65534)))
  )
  ;; CHECK:      (func $store8-wrap (param $x i64)
  ;; CHECK-NEXT:  (i64.store8
  ;; CHECK-NEXT:   (i32.const 11)
  ;; CHECK-NEXT:   (local.get $x)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $store8-wrap (param $x i64)
    (i32.store8 (i32.const 11) (i32.wrap_i64 (local.get $x)))
  )
  ;; CHECK:      (func $store16-wrap (param $x i64)
  ;; CHECK-NEXT:  (i64.store16
  ;; CHECK-NEXT:   (i32.const 11)
  ;; CHECK-NEXT:   (local.get $x)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $store16-wrap (param $x i64)
    (i32.store16 (i32.const 11) (i32.wrap_i64 (local.get $x)))
  )
  ;; CHECK:      (func $store-wrap (param $x i64)
  ;; CHECK-NEXT:  (i64.store32
  ;; CHECK-NEXT:   (i32.const 11)
  ;; CHECK-NEXT:   (local.get $x)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $store-wrap (param $x i64)
    (i32.store (i32.const 11) (i32.wrap_i64 (local.get $x)))
  )
  ;; CHECK:      (func $store8-neg1
  ;; CHECK-NEXT:  (i32.store8
  ;; CHECK-NEXT:   (i32.const 7)
  ;; CHECK-NEXT:   (i32.const 255)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $store8-neg1
    (i32.store8 (i32.const 7) (i32.const -1))           ;; 255
  )
  ;; CHECK:      (func $store8-255
  ;; CHECK-NEXT:  (i32.store8
  ;; CHECK-NEXT:   (i32.const 8)
  ;; CHECK-NEXT:   (i32.const 255)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $store8-255
    (i32.store8 (i32.const 8) (i32.const 255))
  )
  ;; CHECK:      (func $store8-256
  ;; CHECK-NEXT:  (i32.store8
  ;; CHECK-NEXT:   (i32.const 9)
  ;; CHECK-NEXT:   (i32.const 0)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $store8-256
    (i32.store8 (i32.const 9) (i32.const 256))          ;; 0
  )
  ;; CHECK:      (func $store16-neg1
  ;; CHECK-NEXT:  (i32.store16
  ;; CHECK-NEXT:   (i32.const 13)
  ;; CHECK-NEXT:   (i32.const 65535)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $store16-neg1
    (i32.store16 (i32.const 13) (i32.const -1))         ;; 65535
  )
  ;; CHECK:      (func $store16-65535
  ;; CHECK-NEXT:  (i32.store16
  ;; CHECK-NEXT:   (i32.const 10)
  ;; CHECK-NEXT:   (i32.const 65535)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $store16-65535
    (i32.store16 (i32.const 10) (i32.const 65535))
  )
  ;; CHECK:      (func $store16-65536
  ;; CHECK-NEXT:  (i32.store16
  ;; CHECK-NEXT:   (i32.const 11)
  ;; CHECK-NEXT:   (i32.const 0)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $store16-65536
    (i32.store16 (i32.const 11) (i32.const 65536))      ;; 0
  )
  ;; CHECK:      (func $store-65536
  ;; CHECK-NEXT:  (i32.store
  ;; CHECK-NEXT:   (i32.const 14)
  ;; CHECK-NEXT:   (i32.const 65536)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $store-65536
    (i32.store (i32.const 14) (i32.const 65536))
  )
  ;; CHECK:      (func $store8-255-i64
  ;; CHECK-NEXT:  (i64.store8
  ;; CHECK-NEXT:   (i32.const 8)
  ;; CHECK-NEXT:   (i64.const 255)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $store8-255-i64
    (i64.store8 (i32.const 8) (i64.const 255))
  )
  ;; CHECK:      (func $store8-256-i64
  ;; CHECK-NEXT:  (i64.store8
  ;; CHECK-NEXT:   (i32.const 9)
  ;; CHECK-NEXT:   (i64.const 0)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $store8-256-i64
    (i64.store8 (i32.const 9) (i64.const 256))          ;; 0
  )
  ;; CHECK:      (func $store16-65535-i64
  ;; CHECK-NEXT:  (i64.store16
  ;; CHECK-NEXT:   (i32.const 10)
  ;; CHECK-NEXT:   (i64.const 65535)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $store16-65535-i64
    (i64.store16 (i32.const 10) (i64.const 65535))
  )
  ;; CHECK:      (func $store16-65536-i64
  ;; CHECK-NEXT:  (i64.store16
  ;; CHECK-NEXT:   (i32.const 11)
  ;; CHECK-NEXT:   (i64.const 0)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $store16-65536-i64
    (i64.store16 (i32.const 11) (i64.const 65536))      ;; 0
  )
  ;; CHECK:      (func $store32-4294967295
  ;; CHECK-NEXT:  (i64.store32
  ;; CHECK-NEXT:   (i32.const 12)
  ;; CHECK-NEXT:   (i64.const 4294967295)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $store32-4294967295
    (i64.store32 (i32.const 12) (i64.const 4294967295))
  )
  ;; CHECK:      (func $store32-4294967296
  ;; CHECK-NEXT:  (i64.store32
  ;; CHECK-NEXT:   (i32.const 13)
  ;; CHECK-NEXT:   (i64.const 0)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $store32-4294967296
    (i64.store32 (i32.const 13) (i64.const 4294967296)) ;; 0
  )
  ;; CHECK:      (func $store-4294967296
  ;; CHECK-NEXT:  (i64.store
  ;; CHECK-NEXT:   (i32.const 14)
  ;; CHECK-NEXT:   (i64.const 4294967296)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $store-4294967296
    (i64.store (i32.const 14) (i64.const 4294967296))
  )
  ;; CHECK:      (func $and-neg1
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (i32.const 100)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (i32.and
  ;; CHECK-NEXT:    (i32.const 100)
  ;; CHECK-NEXT:    (i32.const 1)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $and-neg1
    (drop (i32.and (i32.const 100) (i32.const -1)))
    (drop (i32.and (i32.const 100) (i32.const  1)))
  )
  ;; CHECK:      (func $and-pos1
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (i32.eqz
  ;; CHECK-NEXT:    (i32.const 1000)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (i32.eqz
  ;; CHECK-NEXT:    (i32.const 1000)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (i32.and
  ;; CHECK-NEXT:    (i32.const 100)
  ;; CHECK-NEXT:    (i32.const 1)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (i32.const 1)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $and-pos1
    (drop (i32.and (i32.eqz (i32.const 1000)) (i32.const 1)))
    (drop (i32.and (i32.const 1) (i32.eqz (i32.const 1000))))
    (drop (i32.and (i32.const 100) (i32.const 1)))
    (drop (i32.and (i32.lt_s (i32.const 2000) (i32.const 3000)) (i32.const 1)))
  )
  ;; CHECK:      (func $canonicalize-unreachable
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (i32.and
  ;; CHECK-NEXT:    (unreachable)
  ;; CHECK-NEXT:    (i32.const 1)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (i32.and
  ;; CHECK-NEXT:    (i32.const 1)
  ;; CHECK-NEXT:    (unreachable)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (i32.div_s
  ;; CHECK-NEXT:    (unreachable)
  ;; CHECK-NEXT:    (i32.const 1)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (i32.div_s
  ;; CHECK-NEXT:    (i32.const 1)
  ;; CHECK-NEXT:    (unreachable)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $canonicalize-unreachable
    (drop (i32.and (unreachable) (i32.const 1))) ;; ok to reorder
    (drop (i32.and (i32.const 1) (unreachable)))
    (drop (i32.div_s (unreachable) (i32.const 1))) ;; not ok
    (drop (i32.div_s (i32.const 1) (unreachable)))
  )
  ;; CHECK:      (func $canonicalize-consts-vars (param $x i32) (param $y i32)
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (i32.and
  ;; CHECK-NEXT:    (i32.const 1)
  ;; CHECK-NEXT:    (i32.const 2)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (i32.and
  ;; CHECK-NEXT:    (local.get $x)
  ;; CHECK-NEXT:    (i32.const 3)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (i32.and
  ;; CHECK-NEXT:    (local.get $x)
  ;; CHECK-NEXT:    (i32.const 4)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (i32.and
  ;; CHECK-NEXT:    (local.get $x)
  ;; CHECK-NEXT:    (local.get $y)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (i32.and
  ;; CHECK-NEXT:    (local.get $x)
  ;; CHECK-NEXT:    (local.get $y)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (i32.and
  ;; CHECK-NEXT:    (local.tee $x
  ;; CHECK-NEXT:     (i32.const -4)
  ;; CHECK-NEXT:    )
  ;; CHECK-NEXT:    (local.get $y)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $canonicalize-consts-vars (param $x i32) (param $y i32)
    (drop (i32.and (i32.const 1) (i32.const 2)))
    (drop (i32.and (local.get $x) (i32.const 3)))
    (drop (i32.and (i32.const 4) (local.get $x)))
    (drop (i32.and (local.get $x) (local.get $y)))
    (drop (i32.and (local.get $y) (local.get $x)))
    (drop (i32.and (local.get $y) (local.tee $x (i32.const -4))))
  )
  ;; CHECK:      (func $canonicalize-block-var (param $x i32)
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (i32.and
  ;; CHECK-NEXT:    (block (result i32)
  ;; CHECK-NEXT:     (i32.const -5)
  ;; CHECK-NEXT:    )
  ;; CHECK-NEXT:    (local.get $x)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (i32.and
  ;; CHECK-NEXT:    (block (result i32)
  ;; CHECK-NEXT:     (i32.const -6)
  ;; CHECK-NEXT:    )
  ;; CHECK-NEXT:    (local.get $x)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $canonicalize-block-var (param $x i32)
    (drop (i32.and
      (block (result i32)
        (i32.const -5)
      )
      (local.get $x)
    ))
    (drop (i32.and
      (local.get $x)
      (block (result i32)
        (i32.const -6)
      )
    ))
  )
  ;; CHECK:      (func $canonicalize-block-loop
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (i32.and
  ;; CHECK-NEXT:    (block (result i32)
  ;; CHECK-NEXT:     (i32.const 5)
  ;; CHECK-NEXT:    )
  ;; CHECK-NEXT:    (loop $loop-in (result i32)
  ;; CHECK-NEXT:     (i32.const 6)
  ;; CHECK-NEXT:    )
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (i32.and
  ;; CHECK-NEXT:    (block (result i32)
  ;; CHECK-NEXT:     (i32.const 8)
  ;; CHECK-NEXT:    )
  ;; CHECK-NEXT:    (loop $loop-in1 (result i32)
  ;; CHECK-NEXT:     (i32.const 7)
  ;; CHECK-NEXT:    )
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (i32.and
  ;; CHECK-NEXT:    (block (result i32)
  ;; CHECK-NEXT:     (i32.const 10)
  ;; CHECK-NEXT:    )
  ;; CHECK-NEXT:    (loop $loop-in3 (result i32)
  ;; CHECK-NEXT:     (call $and-pos1)
  ;; CHECK-NEXT:     (i32.const 9)
  ;; CHECK-NEXT:    )
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (i32.and
  ;; CHECK-NEXT:    (block (result i32)
  ;; CHECK-NEXT:     (call $and-pos1)
  ;; CHECK-NEXT:     (i32.const 12)
  ;; CHECK-NEXT:    )
  ;; CHECK-NEXT:    (loop $loop-in5 (result i32)
  ;; CHECK-NEXT:     (i32.const 11)
  ;; CHECK-NEXT:    )
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (i32.and
  ;; CHECK-NEXT:    (loop $loop-in7 (result i32)
  ;; CHECK-NEXT:     (call $and-pos1)
  ;; CHECK-NEXT:     (i32.const 13)
  ;; CHECK-NEXT:    )
  ;; CHECK-NEXT:    (block (result i32)
  ;; CHECK-NEXT:     (call $and-pos1)
  ;; CHECK-NEXT:     (i32.const 14)
  ;; CHECK-NEXT:    )
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (i32.and
  ;; CHECK-NEXT:    (block (result i32)
  ;; CHECK-NEXT:     (call $and-pos1)
  ;; CHECK-NEXT:     (i32.const 14)
  ;; CHECK-NEXT:    )
  ;; CHECK-NEXT:    (loop $loop-in10 (result i32)
  ;; CHECK-NEXT:     (call $and-pos1)
  ;; CHECK-NEXT:     (i32.const 13)
  ;; CHECK-NEXT:    )
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $canonicalize-block-loop
    (drop (i32.and
      (block (result i32)
        (i32.const 5)
      )
      (loop (result i32)
        (i32.const 6)
      )
    ))
    (drop (i32.and
      (loop (result i32)
        (i32.const 7)
      )
      (block (result i32)
        (i32.const 8)
      )
    ))
    (drop (i32.and
      (loop (result i32)
        (call $and-pos1)
        (i32.const 9)
      )
      (block (result i32)
        (i32.const 10)
      )
    ))
    (drop (i32.and
      (loop (result i32)
        (i32.const 11)
      )
      (block (result i32)
        (call $and-pos1)
        (i32.const 12)
      )
    ))
    (drop (i32.and
      (loop (result i32)
        (call $and-pos1)
        (i32.const 13)
      )
      (block (result i32)
        (call $and-pos1)
        (i32.const 14)
      )
    ))
    (drop (i32.and
      (block (result i32)
        (call $and-pos1)
        (i32.const 14)
      )
      (loop (result i32)
        (call $and-pos1)
        (i32.const 13)
      )
    ))
  )
  ;; CHECK:      (func $canonicalize-gt_s-gt-u
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (i32.and
  ;; CHECK-NEXT:    (i32.gt_u
  ;; CHECK-NEXT:     (i32.const 16)
  ;; CHECK-NEXT:     (i32.const 17)
  ;; CHECK-NEXT:    )
  ;; CHECK-NEXT:    (i32.gt_u
  ;; CHECK-NEXT:     (i32.const 18)
  ;; CHECK-NEXT:     (i32.const 19)
  ;; CHECK-NEXT:    )
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (i32.and
  ;; CHECK-NEXT:    (i32.gt_u
  ;; CHECK-NEXT:     (i32.const 20)
  ;; CHECK-NEXT:     (i32.const 21)
  ;; CHECK-NEXT:    )
  ;; CHECK-NEXT:    (i32.gt_u
  ;; CHECK-NEXT:     (i32.const 22)
  ;; CHECK-NEXT:     (i32.const 23)
  ;; CHECK-NEXT:    )
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $canonicalize-gt_s-gt-u
    (drop (i32.and
      (i32.gt_s
        (i32.const 16)
        (i32.const 17)
      )
      (i32.gt_u
        (i32.const 18)
        (i32.const 19)
      )
    ))
    (drop (i32.and
      (i32.gt_u
        (i32.const 20)
        (i32.const 21)
      )
      (i32.gt_s
        (i32.const 22)
        (i32.const 23)
      )
    ))
  )
  ;; CHECK:      (func $canonicalize-cmp-near-zero (param $x i32)
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (i32.ge_s
  ;; CHECK-NEXT:    (local.get $x)
  ;; CHECK-NEXT:    (i32.const 0)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (i32.lt_s
  ;; CHECK-NEXT:    (local.get $x)
  ;; CHECK-NEXT:    (i32.const 0)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (i32.ge_s
  ;; CHECK-NEXT:    (local.get $x)
  ;; CHECK-NEXT:    (i32.const 0)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (i32.lt_s
  ;; CHECK-NEXT:    (local.get $x)
  ;; CHECK-NEXT:    (i32.const 0)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (i32.le_s
  ;; CHECK-NEXT:    (local.get $x)
  ;; CHECK-NEXT:    (i32.const 0)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (i32.gt_s
  ;; CHECK-NEXT:    (local.get $x)
  ;; CHECK-NEXT:    (i32.const 0)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (i32.eqz
  ;; CHECK-NEXT:    (local.get $x)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (i32.ne
  ;; CHECK-NEXT:    (local.get $x)
  ;; CHECK-NEXT:    (i32.const 0)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $canonicalize-cmp-near-zero (param $x i32)
    ;; i32(x) > -1  ==>  x >= 0
    (drop (i32.gt_s
      (local.get $x)
      (i32.const -1)
    ))
    ;; i32(x) <= -1  ==>  x < 0
    (drop (i32.le_s
      (local.get $x)
      (i32.const -1)
    ))
    ;; -1 < i32(x)  ==>  x >= 0
    (drop (i32.lt_s
      (i32.const -1)
      (local.get $x)
    ))
    ;; -1 >= i32(x)  ==>  x < 0
    (drop (i32.ge_s
      (i32.const -1)
      (local.get $x)
    ))
    ;; i32(x) < 1   ==>   x <= 0
    (drop (i32.lt_s
      (local.get $x)
      (i32.const 1)
    ))
    ;; (signed)x >= 1   ==>   x > 0
    (drop (i32.ge_s
      (local.get $x)
      (i32.const 1)
    ))
    ;; u32(x) < 1   ==>   x == 0
    (drop (i32.lt_u
      (local.get $x)
      (i32.const 1)
    ))
    ;; u32(x) >= 1   ==>   x != 0
    (drop (i32.ge_u
      (local.get $x)
      (i32.const 1)
    ))
  )
  ;; CHECK:      (func $canonicalize-cmp-near-min-max (param $x i32) (param $y i64)
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (i32.eq
  ;; CHECK-NEXT:    (local.get $x)
  ;; CHECK-NEXT:    (i32.const -2147483648)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (i64.eq
  ;; CHECK-NEXT:    (local.get $y)
  ;; CHECK-NEXT:    (i64.const -9223372036854775808)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (i32.ne
  ;; CHECK-NEXT:    (local.get $x)
  ;; CHECK-NEXT:    (i32.const -2147483648)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (i64.ne
  ;; CHECK-NEXT:    (local.get $y)
  ;; CHECK-NEXT:    (i64.const -9223372036854775808)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (i32.eq
  ;; CHECK-NEXT:    (local.get $x)
  ;; CHECK-NEXT:    (i32.const 2147483647)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (i64.eq
  ;; CHECK-NEXT:    (local.get $y)
  ;; CHECK-NEXT:    (i64.const 9223372036854775807)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (i32.ne
  ;; CHECK-NEXT:    (local.get $x)
  ;; CHECK-NEXT:    (i32.const 2147483647)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (i64.ne
  ;; CHECK-NEXT:    (local.get $y)
  ;; CHECK-NEXT:    (i64.const 9223372036854775807)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (i32.ne
  ;; CHECK-NEXT:    (local.get $x)
  ;; CHECK-NEXT:    (i32.const -1)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (i64.ne
  ;; CHECK-NEXT:    (local.get $y)
  ;; CHECK-NEXT:    (i64.const -1)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (i32.eq
  ;; CHECK-NEXT:    (local.get $x)
  ;; CHECK-NEXT:    (i32.const -1)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (i64.eq
  ;; CHECK-NEXT:    (local.get $y)
  ;; CHECK-NEXT:    (i64.const -1)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $canonicalize-cmp-near-min-max (param $x i32) (param $y i64)
    ;; (signed)x < s_min + 1   ==>   x == s_min
    (drop (i32.lt_s
      (local.get $x)
      (i32.const -2147483647)
    ))
    (drop (i64.lt_s
      (local.get $y)
      (i64.const -9223372036854775807)
    ))
    ;; (signed)x >= s_min + 1   ==>   x != s_min
    (drop (i32.ge_s
      (local.get $x)
      (i32.const -2147483647)
    ))
    (drop (i64.ge_s
      (local.get $y)
      (i64.const -9223372036854775807)
    ))
    ;; (signed)x > s_max - 1   ==>   x == s_max
    (drop (i32.gt_s
      (local.get $x)
      (i32.const 2147483646)
    ))
    (drop (i64.gt_s
      (local.get $y)
      (i64.const 9223372036854775806)
    ))
    ;; (signed)x <= s_max - 1   ==>   x != s_max
    (drop (i32.le_s
      (local.get $x)
      (i32.const 2147483646)
    ))
    (drop (i64.le_s
      (local.get $y)
      (i64.const 9223372036854775806)
    ))
    ;; (unsigned)x <= u_max - 1   ==>   x != u_max
    (drop (i32.le_u
      (local.get $x)
      (i32.const -2)
    ))
    (drop (i64.le_u
      (local.get $y)
      (i64.const -2)
    ))
    ;; (unsigned)x > u_max - 1   ==>   x == u_max
    (drop (i32.gt_u
      (local.get $x)
      (i32.const -2)
    ))
    (drop (i64.gt_u
      (local.get $y)
      (i64.const -2)
    ))
  )
  ;; CHECK:      (func $canonicalize-cmp-const (param $x i32) (param $fx f64)
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (i32.le_s
  ;; CHECK-NEXT:    (local.get $x)
  ;; CHECK-NEXT:    (i32.const 0)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (i32.const 0)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (i32.ne
  ;; CHECK-NEXT:    (local.get $x)
  ;; CHECK-NEXT:    (i32.const -1)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (f64.ne
  ;; CHECK-NEXT:    (local.get $fx)
  ;; CHECK-NEXT:    (f64.const -1)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (f64.gt
  ;; CHECK-NEXT:    (local.get $fx)
  ;; CHECK-NEXT:    (f64.const -2)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (f64.le
  ;; CHECK-NEXT:    (local.get $fx)
  ;; CHECK-NEXT:    (f64.const inf)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (i32.const 0)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (f64.ge
  ;; CHECK-NEXT:    (f64.const 1)
  ;; CHECK-NEXT:    (f64.const 2)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $canonicalize-cmp-const (param $x i32) (param $fx f64)
    (drop (i32.gt_s
      (i32.const 1)
      (local.get $x)
    ))
    (drop (i32.gt_u
      (i32.const 0)
      (local.get $x)
    ))
    (drop (i32.ne
      (i32.const -1)
      (local.get $x)
    ))
    (drop (f64.ne
      (f64.const -1)
      (local.get $fx)
    ))
    (drop (f64.lt
      (f64.const -2)
      (local.get $fx)
    ))
    (drop (f64.ge
      (f64.const inf)
      (local.get $fx)
    ))
    (drop (f64.le
      (f64.const nan)
      (local.get $fx)
    ))
    ;; skip
    (drop (f64.ge
      (f64.const 1)
      (f64.const 2)
    ))
  )
  ;; CHECK:      (func $canonicalize-nested-vars (param $x i32) (param $y i32)
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (i32.add
  ;; CHECK-NEXT:    (i32.ctz
  ;; CHECK-NEXT:     (local.get $x)
  ;; CHECK-NEXT:    )
  ;; CHECK-NEXT:    (i32.ctz
  ;; CHECK-NEXT:     (local.get $y)
  ;; CHECK-NEXT:    )
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (i32.add
  ;; CHECK-NEXT:    (i32.ctz
  ;; CHECK-NEXT:     (local.get $y)
  ;; CHECK-NEXT:    )
  ;; CHECK-NEXT:    (i32.ctz
  ;; CHECK-NEXT:     (local.get $x)
  ;; CHECK-NEXT:    )
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $canonicalize-nested-vars (param $x i32) (param $y i32)
    (drop (i32.add (i32.ctz (local.get $x)) (i32.ctz (local.get $y))))
    (drop (i32.add (i32.ctz (local.get $y)) (i32.ctz (local.get $x))))
  )
  ;; CHECK:      (func $canonicalize-ctz-eqz (param $x i32) (param $y i32)
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (i32.add
  ;; CHECK-NEXT:    (i32.ctz
  ;; CHECK-NEXT:     (local.get $x)
  ;; CHECK-NEXT:    )
  ;; CHECK-NEXT:    (i32.eqz
  ;; CHECK-NEXT:     (local.get $y)
  ;; CHECK-NEXT:    )
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (i32.add
  ;; CHECK-NEXT:    (i32.ctz
  ;; CHECK-NEXT:     (local.get $y)
  ;; CHECK-NEXT:    )
  ;; CHECK-NEXT:    (i32.eqz
  ;; CHECK-NEXT:     (local.get $x)
  ;; CHECK-NEXT:    )
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $canonicalize-ctz-eqz (param $x i32) (param $y i32)
    (drop (i32.add (i32.ctz (local.get $x)) (i32.eqz (local.get $y))))
    (drop (i32.add (i32.eqz (local.get $x)) (i32.ctz (local.get $y))))
  )
  ;; CHECK:      (func $canonicalize-consts-floats (param $x f32) (param $y f64)
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (f32.add
  ;; CHECK-NEXT:    (local.get $x)
  ;; CHECK-NEXT:    (f32.const -1)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (f64.add
  ;; CHECK-NEXT:    (local.get $y)
  ;; CHECK-NEXT:    (f64.const -1)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (f32.mul
  ;; CHECK-NEXT:    (local.get $x)
  ;; CHECK-NEXT:    (f32.const 3.4000000953674316)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (f64.mul
  ;; CHECK-NEXT:    (local.get $y)
  ;; CHECK-NEXT:    (f64.const 3.4)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (f32.min
  ;; CHECK-NEXT:    (local.get $x)
  ;; CHECK-NEXT:    (f32.const 3.4000000953674316)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (f64.min
  ;; CHECK-NEXT:    (local.get $y)
  ;; CHECK-NEXT:    (f64.const 3.4)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (f32.max
  ;; CHECK-NEXT:    (local.get $x)
  ;; CHECK-NEXT:    (f32.const 3.4000000953674316)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (f64.max
  ;; CHECK-NEXT:    (local.get $y)
  ;; CHECK-NEXT:    (f64.const 3.4)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (f32.const nan:0x400000)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (f64.const nan:0x8000000000000)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (f32.const nan:0x400000)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (f64.const nan:0x8000000000000)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (f32.copysign
  ;; CHECK-NEXT:    (f32.const 1)
  ;; CHECK-NEXT:    (local.get $x)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (f64.copysign
  ;; CHECK-NEXT:    (f64.const 1)
  ;; CHECK-NEXT:    (local.get $y)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $canonicalize-consts-floats (param $x f32) (param $y f64)
    (drop (f32.sub (local.get $x) (f32.const 1.0)))
    (drop (f64.sub (local.get $y) (f64.const 1.0)))

    (drop (f32.mul (f32.const 3.4) (local.get $x)))
    (drop (f64.mul (f64.const 3.4) (local.get $y)))

    (drop (f32.min (f32.const 3.4) (local.get $x)))
    (drop (f64.min (f64.const 3.4) (local.get $y)))

    (drop (f32.max (f32.const 3.4) (local.get $x)))
    (drop (f64.max (f64.const 3.4) (local.get $y)))

    (drop (f32.min (f32.const nan) (local.get $x)))
    (drop (f64.min (f64.const nan) (local.get $y)))

    (drop (f32.max (f32.const nan) (local.get $x)))
    (drop (f64.max (f64.const nan) (local.get $y)))

    ;; skips
    (drop (f32.copysign (f32.const 1.0) (local.get $x)))
    (drop (f64.copysign (f64.const 1.0) (local.get $y)))
  )
  ;; CHECK:      (func $ne0 (result i32)
  ;; CHECK-NEXT:  (if
  ;; CHECK-NEXT:   (call $ne0)
  ;; CHECK-NEXT:   (nop)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (if
  ;; CHECK-NEXT:   (call $ne0)
  ;; CHECK-NEXT:   (nop)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (if
  ;; CHECK-NEXT:   (i32.or
  ;; CHECK-NEXT:    (call $ne0)
  ;; CHECK-NEXT:    (call $ne0)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:   (nop)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (if
  ;; CHECK-NEXT:   (i32.and
  ;; CHECK-NEXT:    (i32.ne
  ;; CHECK-NEXT:     (call $ne0)
  ;; CHECK-NEXT:     (i32.const 0)
  ;; CHECK-NEXT:    )
  ;; CHECK-NEXT:    (i32.ne
  ;; CHECK-NEXT:     (call $ne0)
  ;; CHECK-NEXT:     (i32.const 0)
  ;; CHECK-NEXT:    )
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:   (nop)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (i32.const 1)
  ;; CHECK-NEXT: )
  (func $ne0 (result i32)
    (if (i32.ne (call $ne0) (i32.const 0))
      (nop)
    )
    (if (i32.ne (i32.const 0) (call $ne0))
      (nop)
    )