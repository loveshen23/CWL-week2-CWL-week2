(module
 (type $none_=>_anyref (func (result anyref)))
 (type $sig_anyref (func (param anyref)))
 (type $sig_funcref (func (param funcref)))
 (type $none_=>_funcref (func (result funcref)))
 (type $sig_eqref (func (param eqref)))
 (type $none_=>_none (func))
 (type $none_=>_eqref (func (result eqref)))
 (type $i32_=>_none (func (param i32)))
 (type $eqref_=>_funcref (func (param eqref) (result funcref)))
 (import "env" "import_global" (global $import_global eqref))
 (import "env" "import_func" (func $import_func (param eqref) (result funcref)))
 (global $global_eqref (mut eqref) (ref.null none))
 (global $global_funcref (mut funcref) (ref.null nofunc))
 (global $global_funcref_func (mut funcref) (ref.func $foo))
 (global $global_anyref (mut anyref) (ref.null none))
 (global $global_anyref2 (mut anyref) (ref.null none))
 (table $0 3 3 funcref)
 (elem (i32.const 0) $take_eqref $take_funcref $take_anyref)
 (elem declare func $foo $ref-taken-but-not-in-table)
 (tag $e-i32 (param i32))
 (export "export_func" (func $import_func))
 (export "export_global" (global $import_global))
 (func $take_eqref (type $sig_eqref) (param $0 eqref)
  (nop)
 )
 (func $take_funcref (type $sig_funcref) (param $0 funcref)
  (nop)
 )
 (func $take_anyref (type $sig_anyref) (param $0 anyref)
  (nop)
 )
 (func $foo (type $none_=>_none)
  (nop)
 )
 (func $test (type $none_=>_none)
  (local $local_eqref eqref)
  (local $local_funcref funcref)
  (local $local_anyref anyref)
  (local.set $local_eqref
   (local.get $local_eqref)
  )
  (local.set $local_eqref
   (global.get $global_eqref)
  )
  (local.set $local_eqref
   (ref.null none)
  )
  (local.set $local_funcref
   (local.get $local_funcref)
  )
  (local.set $local_funcref
   (global.get $global_funcref)
  )
  (local.set $local_funcref
   (ref.null nofunc)
  )
  (local.set $local_funcref
   (ref.func $foo)
  )
  (local.set $local_anyref
   (local.get $local_anyref)
  )
  (local.set $local_anyref
   (global.get $global_anyref)
  )
  (local.set $local_anyref
   (ref.null none)
  )
  (local.set $local_anyref
   (local.get $local_eqref)
  )
  (local.set $local_anyref
   (global.get $global_eqref)
  )
  (local.set $local_anyref
   (ref.null none)
  )
  (global.set $global_eqref
   (global.get $global_eqref)
  )
  (global.set $global_eqref
   (local.get $local_eqref)
  )
  (global.set $global_eqref
   (ref.null none)
  )
  (global.set $global_funcref
   (global.get $global_funcref)
  )
  (global.set $global_funcref
   (local.get $local_funcref)
  )
  (global.set $global_funcref
   (ref.null nofunc)
  )
  (global.set $global_funcref
   (ref.func $foo)
  )
  (global.set $global_anyref
   (global.get $global_anyref)
  )
  (global.set $global_anyref
   (local.get $local_anyref)
  )
  (global.set $global_anyref
   (ref.null none)
  )
  (global.set $global_anyref
   (global.get $global_eqref)
  )
  (global.set $global_anyref
   (local.get $local_eqref)
  )
  (global.set $global_anyref
   (ref.null none)
  )
  (call $take_eqref
   (local.get $local_eqref)
  )
  (call $take_eqref
   (global.get $global_eqref)
  )
  (call $take_eqref
   (ref.null none)
  )
  (call $take_funcref
   (local.get $local_funcref)
  )
  (call $take_funcref
   (global.get $global_funcref)
  )
  (call $take_funcref
   (ref.null nofunc)
  )
  (call $take_funcref
   (ref.func $foo)
  )
  (call $take_anyref
   (local.get $local_anyref)
  )
  (call $take_anyref
   (global.get $global_anyref)
  )
  (call $take_anyref
   (ref.null none)
  )
  (call $take_anyref
   (local.get $local_eqref)
  )
  (call $take_anyref
   (global.get $global_eqref)
  )
  (call $take_anyref
   (ref.null none)
  )
  (call_indirect $0 (type $sig_eqref)
   (local.get $local_eqref)
   (i32.const 0)
  )
  (call_indirect $0 (type $sig_eqref)
   (global.get $global_eqref)
   (i32.const 0)
  )
  (call_indirect $0 (type $sig_eqref)
   (ref.null none)
   (i32.const 0)
  )
  (call_indirect $0 (type $sig_funcref)
   (local.get $local_funcref)
   (i32.const 1)
  )
  (call_indirect $0 (type $sig_funcref)
   (global.get $global_funcref)
   (i32.const 1)
  )
  (call_indirect $0 (type $sig_funcref)
   (ref.null nofunc)
   (i32.const 1)
  )
  (call_indirect $0 (type $sig_funcref)
   (ref.func $foo)
   (i32.const 1)
  )
  (call_indirect $0 (type $sig_anyref)
   (local.get $local_anyref)
   (i32.const 3)
  )
  (call_indirect $0 (type $sig_anyref)
   (global.get $global_anyref)
   (i32.const 3)
  )
  (call_indirect $0 (type $sig_anyref)
   (ref.null none)
   (i32.const 3)
  )
  (call_indirect $0 (type $sig_anyref)
   (local.get $local_eqref)
   (i32.const 3)
  )
  (call_indirect $0 (type $sig_anyref)
   (global.get $global_eqref)
   (i32.const 3)
  )
  (call_indirect $0 (type $sig_anyref)
   (ref.null none)
   (i32.const 3)
  )
  (drop
   (block $label$1 (result eqref)
    (br_if $label$1
     (local.get $local_eqref)
     (i32.const 1)
    )
   )
  )
  (drop
   (block $label$2 (result eqref)
    (br_if $label$2
     (global.get $global_eqref)
     (i32.const 1)
    )
   )
  )
  (drop
   (block $label$3 (result eqref)
    (br_if $label$3
     (ref.null none)
     (i32.const 1)
    )
   )
  )
  (drop
   (block $label$4 (result funcref)
    (br_if $label$4
     (local.get $local_funcref)
     (i32.const 1)
    )
   )
  )
  (drop
   (block $label$5 (result funcref)
    (br_if $label$5
     (global.get $global_funcref)
     (i32.const 1)
    )
   )
  )
  (drop
   (block $label$6 (result funcref)
 